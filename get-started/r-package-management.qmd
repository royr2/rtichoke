---
title: "Installing and Managing R Packages"
date: "2025-03-28"
categories: [R, Packages, Getting Started]
image: "../images/r-packages.png"
execute:
  echo: true
  warning: false
  message: false
  eval: false
---

R's true power comes from its vast ecosystem of packages. This guide shows how to effectively install, update, and manage packages for data analysis projects.

## Installing Packages

R packages can be installed from CRAN (the Comprehensive R Archive Network) using the `install.packages()` function:

```{r}
# Install a single package
install.packages("dplyr")

# Install multiple packages at once
install.packages(c("ggplot2", "tidyr", "readr"))
```

Some packages may require selecting a CRAN mirror for downloading. Simply choose a location nearby from the list that appears.

To set a CRAN mirror manually:

```{r}
# Set CRAN mirror manually (example: RStudio mirror)
options(repos = c(CRAN = "https://cran.rstudio.com/"))
```

## Alternative Package Installers

### Using pacman

The `pacman` package provides a simplified interface for package management with **automatic loading**:

```{r}
# Install pacman first
install.packages("pacman")

# Load and install packages in one step
pacman::p_load(dplyr, ggplot2, tidyr)

# Check if packages are loaded
pacman::p_loaded(dplyr, ggplot2)

# Unload packages
pacman::p_unload(dplyr, ggplot2)
```

**Key advantage**: Combines installation and loading in one function (`p_load`).

### Using pak

The `pak` package offers **fast and reliable package installation** with superior dependency resolution:

```{r}
# Install pak
install.packages("pak")

# Install packages with pak
pak::pkg_install("dplyr")

# Install multiple packages
pak::pkg_install(c("ggplot2", "tidyr", "readr"))

# Install from GitHub
pak::pkg_install("tidyverse/ggplot2")
```

**Key advantages**: Much faster installation, better dependency handling, and works with multiple repositories (CRAN, GitHub, etc.).

## Loading Packages

Once installed, packages need to be loaded in each R session before using them:

```{r}
# Load a package
library(ggplot2)

# Functions from the package can now be used
ggplot(mtcars, aes(x = wt, y = mpg)) + 
  geom_point() + 
  theme_minimal()
```

## Checking Installed Packages

To see what packages are installed on the system:

```{r}
# List all installed packages
installed.packages()[, c("Package", "Version")]

# Check if a specific package is installed
"dplyr" %in% rownames(installed.packages())
```

## Updating Packages

Keeping packages up-to-date ensures you have the latest features and bug fixes:

```{r}
# Update all packages
update.packages()

# Update without asking for confirmation
update.packages(ask = FALSE)
```

## Installing from GitHub

Many cutting-edge packages are available on GitHub before they reach CRAN:

```{r}
# First, install the devtools package if you haven't already
install.packages("devtools")

# Then use it to install packages from GitHub
library(devtools)
install_github("tidyverse/ggplot2")
```

## Package Dependencies

R automatically handles dependencies (other packages required by your target package). However, sometimes you may encounter issues with dependencies that require manual intervention:

```{r}
# Force reinstallation of a package and its dependencies
install.packages("problematic_package", dependencies = TRUE)
```

## Creating a Reproducible Environment

For collaborative or production work, it's important to track package versions:

```{r}
# Record packages and versions with renv
install.packages("renv")
library(renv)
renv::init()      # Initialize a project environment
renv::snapshot()  # Save the current state of packages
```

The `renv` package creates isolated, reproducible environments similar to Python's virtual environments.

## Managing Package Conflicts

Sometimes packages have functions with the same name, causing conflicts:

```{r}

# Specify the package explicitly
dplyr::filter(df, x > 10)  # Use filter from dplyr
stats::filter(x, rep(1/3, 3))  # Use filter from stats
```

## Pro Tip: Package Installation Script

For projects requiring multiple packages, create an installation script:

```{r}
# Create a function to check and install packages
install_if_missing <- function(pkg) {
  if (!require(pkg, character.only = TRUE)) {
    install.packages(pkg)
    library(pkg, character.only = TRUE)
  }
}

# List all required packages
packages <- c("tidyverse", "data.table", "caret", "lubridate", "janitor")

# Install all packages
invisible(sapply(packages, install_if_missing))
```

This script installs packages only if they're not already available, saving time when setting up on a new machine or sharing code with collaborators.
