---
title: "Introduction to data.table"
description: "Learn the basics of fast data manipulation with the data.table package in R"
date: "2023-03-10"
categories: [data-manipulation, performance]
image: "https://raw.githubusercontent.com/Rdatatable/data.table/master/vignettes/logo.png"
execute:
  echo: true
  warning: false
  message: false
  eval: true
---

## Introduction to data.table

The `data.table` package is a high-performance extension of R's `data.frame` that provides concise syntax for data manipulation. It is particularly efficient for large datasets.

### Getting Started with data.table

First, install and load the package:

```{r}
# Install if needed (uncomment to run)
# install.packages("data.table")

# Load the package
library(data.table)

# Convert the built-in mtcars dataset to a data.table
dt_cars <- as.data.table(mtcars, keep.rownames = TRUE)
setnames(dt_cars, "rn", "model")  # Rename the rownames column
head(dt_cars)
```

### Basic Syntax: \[i, j, by\]

data.table uses a concise syntax based on `[i, j, by]`: - `i`: Subset rows (WHERE) - `j`: Compute on columns (SELECT) - `by`: Group by columns (GROUP BY)

#### Subsetting Rows (i)

```{r}
# Select cars with 6 cylinders
dt_cars[cyl == 6]

# Multiple conditions
dt_cars[cyl == 6 & mpg > 20]

# Select specific rows by position
dt_cars[1:5]
```

#### Selecting and Computing on Columns (j)

```{r}
# Select specific columns
dt_cars[1:10, .(mpg, hp, cyl)]

# Compute new values
dt_cars[1:10, .(kpl = mpg * 0.425)]

# Select and compute multiple columns
dt_cars[1:10, .(model, kpl = mpg * 0.425, hp_per_cyl = hp/cyl)]

# Apply functions
dt_cars[1:10, .(avg_mpg = mean(mpg), max_hp = max(hp))]
```

#### Grouping (by)

```{r}
# Group by cylinder and calculate statistics
dt_cars[, .(count = .N, avg_mpg = mean(mpg)), by = cyl]

# Multiple grouping variables
dt_cars[, .(count = .N, avg_mpg = mean(mpg)), by = .(cyl, gear)]

# Grouping with expressions
dt_cars[, .(count = .N), by = .(cyl, high_mpg = mpg > 20)]
```

### Special Symbols in data.table

data.table provides special symbols for common operations:

```{r}
# .N: number of rows
dt_cars[, .N]
dt_cars[, .N, by = cyl]

# .SD: Subset of Data
dt_cars[, lapply(.SD, mean), by = cyl, .SDcols = c("mpg", "hp", "wt")]

# .I: Row numbers
dt_cars[, .I[1:2], by = cyl]  # First two row numbers for each cyl group
```

### Modifying Data

data.table allows efficient in-place modifications:

```{r}
# Create a copy to avoid modifying the original
dt_copy <- copy(dt_cars)

# Add a new column
dt_copy[, efficiency := mpg/wt]
head(dt_copy)

# Update existing values
dt_copy[cyl == 4, mpg := mpg * 1.1]  # Increase mpg by 10% for 4-cylinder cars
head(dt_copy)

# Delete columns
dt_copy[, c("carb", "vs") := NULL]
head(dt_copy)
```

### Keys and Indexing

Setting keys enables fast subsetting and joins:

```{r}
# Set a key
setkey(dt_copy, cyl)
dt_copy

# Fast subsetting using key
dt_copy[.(6)]  # All rows where cyl == 6

# Multiple keys
setkey(dt_copy, cyl, gear)
dt_copy[.(6, 4)]  # All rows where cyl == 6 and gear == 4
```

### Joins in data.table

data.table provides efficient joins using keys:

```{r}
# Create sample data.tables
manufacturers <- data.table(
  make = c("Honda", "Toyota", "Ford", "BMW", "Mercedes"),
  country = c("Japan", "Japan", "USA", "Germany", "Germany")
)

cars <- data.table(
  model = c("Civic", "Corolla", "Focus", "3 Series", "Fiesta"),
  make = c("Honda", "Toyota", "Ford", "BMW", "Ford")
)

# Set keys for joining
setkey(manufacturers, make)
setkey(cars, make)

# Inner join
cars[manufacturers]

# Left join
manufacturers[cars, nomatch=NA]

# Non-equi joins
dt_cars[dt_cars[, .(max_mpg = max(mpg)), by = cyl], on = .(mpg = max_mpg, cyl)]
```

### Reshaping data

data.table provides functions for reshaping data:

```{r}
# Create a sample data.table
dt <- data.table(
  id = rep(1:3, each = 2),
  variable = rep(c("height", "weight"), 3),
  value = c(170, 68, 155, 52, 182, 75)
)
dt

# Wide to long
dt_wide <- dcast(dt, id ~ variable, value.var = "value")
dt_wide

# Long to wide
dt_long <- melt(dt_wide, id.vars = "id", variable.name = "measure", value.name = "value")
dt_long
```

### Performance Benefits

data.table is designed for performance:

```{r}
# Create a larger dataset for demonstration
set.seed(123)
n <- 1e6
dt_large <- data.table(
  id = 1:n,
  x = sample(1:100, n, replace = TRUE),
  y = sample(letters[1:5], n, replace = TRUE)
)

# Measure time for a grouped operation
system.time(dt_large[, .(mean_x = mean(x)), by = y])

# Compare with equivalent dplyr operation (if dplyr is installed)
df_large <- as.data.frame(dt_large)
system.time(dplyr::summarise(dplyr::group_by(df_large, y), mean_x = mean(x)))
```

data.table is particularly valuable when working with large datasets due to its efficient memory usage and optimized C implementation.
