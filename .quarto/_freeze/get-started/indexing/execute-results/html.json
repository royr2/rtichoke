{
  "hash": "990ac0c83a9b1dd4312693203d829350",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Indexing Arrays in R\"\ndescription: \"Learn how to access and manipulate elements in vectors, matrices, and arrays in R\"\ndate: \"2025-03-30\"\ncategories: [basics, r-programming]\nimage: \"https://raw.githubusercontent.com/rstudio/hex-stickers/master/PNG/RStudio.png\"\nexecute:\n  echo: true\n  warning: false\n  message: false\n  eval: true\n---\n\n\n\n\n## Indexing Arrays in R\n\nR provides flexible ways to access and manipulate elements in data structures like vectors, matrices, and arrays.\n\n### Vector Indexing\n\nVectors are one-dimensional arrays and the most basic data structure in R:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a vector\nx <- c(10, 20, 30, 40, 50)\n\n# Access by position (indexing starts at 1, not 0)\nx[1]        # First element\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10\n```\n\n\n:::\n\n```{.r .cell-code}\nx[3]        # Third element\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 30\n```\n\n\n:::\n\n```{.r .cell-code}\nx[length(x)] # Last element\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 50\n```\n\n\n:::\n\n```{.r .cell-code}\n# Access multiple elements\nx[c(1, 3, 5)]  # First, third, and fifth elements\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10 30 50\n```\n\n\n:::\n\n```{.r .cell-code}\nx[1:3]         # First three elements\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10 20 30\n```\n\n\n:::\n\n```{.r .cell-code}\n# Negative indices exclude elements\nx[-2]          # All elements except the second\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10 30 40 50\n```\n\n\n:::\n\n```{.r .cell-code}\nx[-(3:5)]      # All elements except third through fifth\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10 20\n```\n\n\n:::\n:::\n\n\n\n\n### Logical Indexing\n\nLogical vectors can be used to filter elements:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a vector\nages <- c(25, 18, 45, 32, 16, 50)\n\n# Filter using logical conditions\nages[ages > 30]         # Elements greater than 30\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 45 32 50\n```\n\n\n:::\n\n```{.r .cell-code}\nages[ages >= 18 & ages <= 40]  # Elements between 18 and 40\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 25 18 32\n```\n\n\n:::\n\n```{.r .cell-code}\n# Named logical operations\nadults <- ages >= 18\nages[adults]            # Only adult ages\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 25 18 45 32 50\n```\n\n\n:::\n:::\n\n\n\n\n### Matrix Indexing\n\nMatrices are two-dimensional arrays:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a matrix\nmat <- matrix(1:12, nrow = 3, ncol = 4)\nprint(mat)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3] [,4]\n[1,]    1    4    7   10\n[2,]    2    5    8   11\n[3,]    3    6    9   12\n```\n\n\n:::\n\n```{.r .cell-code}\n# Access by row and column indices\nmat[1, 2]      # Element at first row, second column\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n\n```{.r .cell-code}\nmat[2, ]       # Entire second row\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  2  5  8 11\n```\n\n\n:::\n\n```{.r .cell-code}\nmat[, 3]       # Entire third column\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 7 8 9\n```\n\n\n:::\n\n```{.r .cell-code}\nmat[1:2, 3:4]  # Submatrix (rows 1-2, columns 3-4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2]\n[1,]    7   10\n[2,]    8   11\n```\n\n\n:::\n\n```{.r .cell-code}\n# Logical indexing in matrices\nmat[mat > 6]   # All elements greater than 6\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  7  8  9 10 11 12\n```\n\n\n:::\n:::\n\n\n\n\n### Array Indexing\n\nArrays can have more than two dimensions:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a 3D array (2x3x2)\narr <- array(1:12, dim = c(2, 3, 2))\nprint(arr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n, , 1\n\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n\n, , 2\n\n     [,1] [,2] [,3]\n[1,]    7    9   11\n[2,]    8   10   12\n```\n\n\n:::\n\n```{.r .cell-code}\n# Access elements\narr[1, 2, 1]   # Element at position [1,2,1]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n\n```{.r .cell-code}\narr[, , 1]     # First \"layer\" of the array\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n```\n\n\n:::\n\n```{.r .cell-code}\narr[1, , ]     # All elements in first row across all layers\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2]\n[1,]    1    7\n[2,]    3    9\n[3,]    5   11\n```\n\n\n:::\n:::\n\n\n\n\n### Data Frame Indexing\n\nData frames combine features of matrices and lists:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a data frame\ndf <- data.frame(\n  name = c(\"Alice\", \"Bob\", \"Charlie\", \"David\"),\n  age = c(25, 30, 35, 40),\n  score = c(88, 92, 79, 94)\n)\nprint(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     name age score\n1   Alice  25    88\n2     Bob  30    92\n3 Charlie  35    79\n4   David  40    94\n```\n\n\n:::\n\n```{.r .cell-code}\n# Access by row and column indices (like matrices)\ndf[1, 2]       # First row, second column\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 25\n```\n\n\n:::\n\n```{.r .cell-code}\ndf[2:3, ]      # Second and third rows\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     name age score\n2     Bob  30    92\n3 Charlie  35    79\n```\n\n\n:::\n\n```{.r .cell-code}\n# Access by column name\ndf$name        # Name column\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Alice\"   \"Bob\"     \"Charlie\" \"David\"  \n```\n\n\n:::\n\n```{.r .cell-code}\ndf[, \"age\"]    # Age column\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 25 30 35 40\n```\n\n\n:::\n\n```{.r .cell-code}\ndf[[\"score\"]]  # Score column\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 88 92 79 94\n```\n\n\n:::\n\n```{.r .cell-code}\n# Filter rows by condition\ndf[df$age > 30, ]  # Rows where age is greater than 30\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     name age score\n3 Charlie  35    79\n4   David  40    94\n```\n\n\n:::\n:::\n\n\n\n\n### List Indexing\n\nLists can contain elements of different types:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a list\nmy_list <- list(\n  name = \"John\",\n  numbers = c(1, 2, 3),\n  matrix = matrix(1:4, nrow = 2)\n)\nprint(my_list)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$name\n[1] \"John\"\n\n$numbers\n[1] 1 2 3\n\n$matrix\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n```\n\n\n:::\n\n```{.r .cell-code}\n# Access list elements\nmy_list[[1]]       # First element (by position)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"John\"\n```\n\n\n:::\n\n```{.r .cell-code}\nmy_list[[\"name\"]]  # Element by name\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"John\"\n```\n\n\n:::\n\n```{.r .cell-code}\nmy_list$numbers    # Element by name using $ notation\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3\n```\n\n\n:::\n\n```{.r .cell-code}\n# Access nested elements\nmy_list$numbers[2]  # Second element of the numbers vector\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n\n```{.r .cell-code}\nmy_list$matrix[1,2] # Element at row 1, column 2 of the matrix\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n:::\n\n\n\n\n### Advanced Indexing Techniques\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Using which() for positional indexing from logical conditions\nx <- c(5, 10, 15, 20, 25)\nwhich(x > 15)  # Returns positions where condition is TRUE\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4 5\n```\n\n\n:::\n\n```{.r .cell-code}\n# Using %in% for membership tests\nfruits <- c(\"apple\", \"banana\", \"cherry\", \"date\")\nfruits %in% c(\"banana\", \"date\", \"fig\")  # Tests which elements are in the second vector\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE  TRUE FALSE  TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\nfruits[fruits %in% c(\"banana\", \"date\", \"fig\")]  # Select matching elements\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"banana\" \"date\"  \n```\n\n\n:::\n:::\n\n\n\n\nRemember that R indexing starts at 1, not 0 as in many other programming languages.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}