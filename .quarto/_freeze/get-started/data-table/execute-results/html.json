{
  "hash": "9a2603beacde95610fc068c6d3b882b5",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Introduction to data.table\"\ndescription: \"Learn the basics of fast data manipulation with the data.table package in R\"\ndate: \"2023-03-10\"\ncategories: [data-manipulation, performance]\nimage: \"https://raw.githubusercontent.com/Rdatatable/data.table/master/vignettes/logo.png\"\nexecute:\n  echo: true\n  warning: false\n  message: false\n  eval: true\n---\n\n\n\nThe `data.table` package is a high-performance extension of R's `data.frame` that provides concise syntax for data manipulation. It is particularly efficient for large datasets.\n\n### Getting Started with data.table\n\nFirst, install and load the package:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Install if needed (uncomment to run)\n# install.packages(\"data.table\")\n\n# Load the package\nlibrary(data.table)\n\n# Convert the built-in mtcars dataset to a data.table\ndt_cars <- as.data.table(mtcars, keep.rownames = TRUE)\nsetnames(dt_cars, \"rn\", \"model\")  # Rename the rownames column\nhead(dt_cars)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n               model   mpg   cyl  disp    hp  drat    wt  qsec    vs    am\n              <char> <num> <num> <num> <num> <num> <num> <num> <num> <num>\n1:         Mazda RX4  21.0     6   160   110  3.90 2.620 16.46     0     1\n2:     Mazda RX4 Wag  21.0     6   160   110  3.90 2.875 17.02     0     1\n3:        Datsun 710  22.8     4   108    93  3.85 2.320 18.61     1     1\n4:    Hornet 4 Drive  21.4     6   258   110  3.08 3.215 19.44     1     0\n5: Hornet Sportabout  18.7     8   360   175  3.15 3.440 17.02     0     0\n6:           Valiant  18.1     6   225   105  2.76 3.460 20.22     1     0\n    gear  carb\n   <num> <num>\n1:     4     4\n2:     4     4\n3:     4     1\n4:     3     1\n5:     3     2\n6:     3     1\n```\n\n\n:::\n:::\n\n\n\n### Basic Syntax: \\[i, j, by\\]\n\ndata.table uses a concise syntax based on `[i, j, by]`: - `i`: Subset rows (WHERE) - `j`: Compute on columns (SELECT) - `by`: Group by columns (GROUP BY)\n\n#### Subsetting Rows (i)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Select cars with 6 cylinders\ndt_cars[cyl == 6]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n            model   mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear\n           <char> <num> <num> <num> <num> <num> <num> <num> <num> <num> <num>\n1:      Mazda RX4  21.0     6 160.0   110  3.90 2.620 16.46     0     1     4\n2:  Mazda RX4 Wag  21.0     6 160.0   110  3.90 2.875 17.02     0     1     4\n3: Hornet 4 Drive  21.4     6 258.0   110  3.08 3.215 19.44     1     0     3\n4:        Valiant  18.1     6 225.0   105  2.76 3.460 20.22     1     0     3\n5:       Merc 280  19.2     6 167.6   123  3.92 3.440 18.30     1     0     4\n6:      Merc 280C  17.8     6 167.6   123  3.92 3.440 18.90     1     0     4\n7:   Ferrari Dino  19.7     6 145.0   175  3.62 2.770 15.50     0     1     5\n    carb\n   <num>\n1:     4\n2:     4\n3:     1\n4:     1\n5:     4\n6:     4\n7:     6\n```\n\n\n:::\n\n```{.r .cell-code}\n# Multiple conditions\ndt_cars[cyl == 6 & mpg > 20]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n            model   mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear\n           <char> <num> <num> <num> <num> <num> <num> <num> <num> <num> <num>\n1:      Mazda RX4  21.0     6   160   110  3.90 2.620 16.46     0     1     4\n2:  Mazda RX4 Wag  21.0     6   160   110  3.90 2.875 17.02     0     1     4\n3: Hornet 4 Drive  21.4     6   258   110  3.08 3.215 19.44     1     0     3\n    carb\n   <num>\n1:     4\n2:     4\n3:     1\n```\n\n\n:::\n\n```{.r .cell-code}\n# Select specific rows by position\ndt_cars[1:5]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n               model   mpg   cyl  disp    hp  drat    wt  qsec    vs    am\n              <char> <num> <num> <num> <num> <num> <num> <num> <num> <num>\n1:         Mazda RX4  21.0     6   160   110  3.90 2.620 16.46     0     1\n2:     Mazda RX4 Wag  21.0     6   160   110  3.90 2.875 17.02     0     1\n3:        Datsun 710  22.8     4   108    93  3.85 2.320 18.61     1     1\n4:    Hornet 4 Drive  21.4     6   258   110  3.08 3.215 19.44     1     0\n5: Hornet Sportabout  18.7     8   360   175  3.15 3.440 17.02     0     0\n    gear  carb\n   <num> <num>\n1:     4     4\n2:     4     4\n3:     4     1\n4:     3     1\n5:     3     2\n```\n\n\n:::\n:::\n\n\n\n#### Selecting and Computing on Columns (j)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Select specific columns\ndt_cars[1:10, .(mpg, hp, cyl)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      mpg    hp   cyl\n    <num> <num> <num>\n 1:  21.0   110     6\n 2:  21.0   110     6\n 3:  22.8    93     4\n 4:  21.4   110     6\n 5:  18.7   175     8\n 6:  18.1   105     6\n 7:  14.3   245     8\n 8:  24.4    62     4\n 9:  22.8    95     4\n10:  19.2   123     6\n```\n\n\n:::\n\n```{.r .cell-code}\n# Compute new values\ndt_cars[1:10, .(kpl = mpg * 0.425)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        kpl\n      <num>\n 1:  8.9250\n 2:  8.9250\n 3:  9.6900\n 4:  9.0950\n 5:  7.9475\n 6:  7.6925\n 7:  6.0775\n 8: 10.3700\n 9:  9.6900\n10:  8.1600\n```\n\n\n:::\n\n```{.r .cell-code}\n# Select and compute multiple columns\ndt_cars[1:10, .(model, kpl = mpg * 0.425, hp_per_cyl = hp/cyl)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                model     kpl hp_per_cyl\n               <char>   <num>      <num>\n 1:         Mazda RX4  8.9250   18.33333\n 2:     Mazda RX4 Wag  8.9250   18.33333\n 3:        Datsun 710  9.6900   23.25000\n 4:    Hornet 4 Drive  9.0950   18.33333\n 5: Hornet Sportabout  7.9475   21.87500\n 6:           Valiant  7.6925   17.50000\n 7:        Duster 360  6.0775   30.62500\n 8:         Merc 240D 10.3700   15.50000\n 9:          Merc 230  9.6900   23.75000\n10:          Merc 280  8.1600   20.50000\n```\n\n\n:::\n\n```{.r .cell-code}\n# Apply functions\ndt_cars[1:10, .(avg_mpg = mean(mpg), max_hp = max(hp))]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   avg_mpg max_hp\n     <num>  <num>\n1:   20.37    245\n```\n\n\n:::\n:::\n\n\n\n#### Grouping (by)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Group by cylinder and calculate statistics\ndt_cars[, .(count = .N, avg_mpg = mean(mpg)), by = cyl]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     cyl count  avg_mpg\n   <num> <int>    <num>\n1:     6     7 19.74286\n2:     4    11 26.66364\n3:     8    14 15.10000\n```\n\n\n:::\n\n```{.r .cell-code}\n# Multiple grouping variables\ndt_cars[, .(count = .N, avg_mpg = mean(mpg)), by = .(cyl, gear)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     cyl  gear count avg_mpg\n   <num> <num> <int>   <num>\n1:     6     4     4  19.750\n2:     4     4     8  26.925\n3:     6     3     2  19.750\n4:     8     3    12  15.050\n5:     4     3     1  21.500\n6:     4     5     2  28.200\n7:     8     5     2  15.400\n8:     6     5     1  19.700\n```\n\n\n:::\n\n```{.r .cell-code}\n# Grouping with expressions\ndt_cars[, .(count = .N), by = .(cyl, high_mpg = mpg > 20)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     cyl high_mpg count\n   <num>   <lgcl> <int>\n1:     6     TRUE     3\n2:     4     TRUE    11\n3:     8    FALSE    14\n4:     6    FALSE     4\n```\n\n\n:::\n:::\n\n\n\n### Special Symbols in data.table\n\ndata.table provides special symbols for common operations:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# .N: number of rows\ndt_cars[, .N]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 32\n```\n\n\n:::\n\n```{.r .cell-code}\ndt_cars[, .N, by = cyl]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     cyl     N\n   <num> <int>\n1:     6     7\n2:     4    11\n3:     8    14\n```\n\n\n:::\n\n```{.r .cell-code}\n# .SD: Subset of Data\ndt_cars[, lapply(.SD, mean), by = cyl, .SDcols = c(\"mpg\", \"hp\", \"wt\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     cyl      mpg        hp       wt\n   <num>    <num>     <num>    <num>\n1:     6 19.74286 122.28571 3.117143\n2:     4 26.66364  82.63636 2.285727\n3:     8 15.10000 209.21429 3.999214\n```\n\n\n:::\n\n```{.r .cell-code}\n# .I: Row numbers\ndt_cars[, .I[1:2], by = cyl]  # First two row numbers for each cyl group\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     cyl    V1\n   <num> <int>\n1:     6     1\n2:     6     2\n3:     4     3\n4:     4     8\n5:     8     5\n6:     8     7\n```\n\n\n:::\n:::\n\n\n\n### Modifying Data\n\ndata.table allows efficient in-place modifications:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a copy to avoid modifying the original\ndt_copy <- copy(dt_cars)\n\n# Add a new column\ndt_copy[, efficiency := mpg/wt]\nhead(dt_copy)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n               model   mpg   cyl  disp    hp  drat    wt  qsec    vs    am\n              <char> <num> <num> <num> <num> <num> <num> <num> <num> <num>\n1:         Mazda RX4  21.0     6   160   110  3.90 2.620 16.46     0     1\n2:     Mazda RX4 Wag  21.0     6   160   110  3.90 2.875 17.02     0     1\n3:        Datsun 710  22.8     4   108    93  3.85 2.320 18.61     1     1\n4:    Hornet 4 Drive  21.4     6   258   110  3.08 3.215 19.44     1     0\n5: Hornet Sportabout  18.7     8   360   175  3.15 3.440 17.02     0     0\n6:           Valiant  18.1     6   225   105  2.76 3.460 20.22     1     0\n    gear  carb efficiency\n   <num> <num>      <num>\n1:     4     4   8.015267\n2:     4     4   7.304348\n3:     4     1   9.827586\n4:     3     1   6.656299\n5:     3     2   5.436047\n6:     3     1   5.231214\n```\n\n\n:::\n\n```{.r .cell-code}\n# Update existing values\ndt_copy[cyl == 4, mpg := mpg * 1.1]  # Increase mpg by 10% for 4-cylinder cars\nhead(dt_copy)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n               model   mpg   cyl  disp    hp  drat    wt  qsec    vs    am\n              <char> <num> <num> <num> <num> <num> <num> <num> <num> <num>\n1:         Mazda RX4 21.00     6   160   110  3.90 2.620 16.46     0     1\n2:     Mazda RX4 Wag 21.00     6   160   110  3.90 2.875 17.02     0     1\n3:        Datsun 710 25.08     4   108    93  3.85 2.320 18.61     1     1\n4:    Hornet 4 Drive 21.40     6   258   110  3.08 3.215 19.44     1     0\n5: Hornet Sportabout 18.70     8   360   175  3.15 3.440 17.02     0     0\n6:           Valiant 18.10     6   225   105  2.76 3.460 20.22     1     0\n    gear  carb efficiency\n   <num> <num>      <num>\n1:     4     4   8.015267\n2:     4     4   7.304348\n3:     4     1   9.827586\n4:     3     1   6.656299\n5:     3     2   5.436047\n6:     3     1   5.231214\n```\n\n\n:::\n\n```{.r .cell-code}\n# Delete columns\ndt_copy[, c(\"carb\", \"vs\") := NULL]\nhead(dt_copy)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n               model   mpg   cyl  disp    hp  drat    wt  qsec    am  gear\n              <char> <num> <num> <num> <num> <num> <num> <num> <num> <num>\n1:         Mazda RX4 21.00     6   160   110  3.90 2.620 16.46     1     4\n2:     Mazda RX4 Wag 21.00     6   160   110  3.90 2.875 17.02     1     4\n3:        Datsun 710 25.08     4   108    93  3.85 2.320 18.61     1     4\n4:    Hornet 4 Drive 21.40     6   258   110  3.08 3.215 19.44     0     3\n5: Hornet Sportabout 18.70     8   360   175  3.15 3.440 17.02     0     3\n6:           Valiant 18.10     6   225   105  2.76 3.460 20.22     0     3\n   efficiency\n        <num>\n1:   8.015267\n2:   7.304348\n3:   9.827586\n4:   6.656299\n5:   5.436047\n6:   5.231214\n```\n\n\n:::\n:::\n\n\n\n### Keys and Indexing\n\nSetting keys enables fast subsetting and joins:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set a key\nsetkey(dt_copy, cyl)\ndt_copy\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nKey: <cyl>\n                  model   mpg   cyl  disp    hp  drat    wt  qsec    am  gear\n                 <char> <num> <num> <num> <num> <num> <num> <num> <num> <num>\n 1:          Datsun 710 25.08     4 108.0    93  3.85 2.320 18.61     1     4\n 2:           Merc 240D 26.84     4 146.7    62  3.69 3.190 20.00     0     4\n 3:            Merc 230 25.08     4 140.8    95  3.92 3.150 22.90     0     4\n 4:            Fiat 128 35.64     4  78.7    66  4.08 2.200 19.47     1     4\n 5:         Honda Civic 33.44     4  75.7    52  4.93 1.615 18.52     1     4\n 6:      Toyota Corolla 37.29     4  71.1    65  4.22 1.835 19.90     1     4\n 7:       Toyota Corona 23.65     4 120.1    97  3.70 2.465 20.01     0     3\n 8:           Fiat X1-9 30.03     4  79.0    66  4.08 1.935 18.90     1     4\n 9:       Porsche 914-2 28.60     4 120.3    91  4.43 2.140 16.70     1     5\n10:        Lotus Europa 33.44     4  95.1   113  3.77 1.513 16.90     1     5\n11:          Volvo 142E 23.54     4 121.0   109  4.11 2.780 18.60     1     4\n12:           Mazda RX4 21.00     6 160.0   110  3.90 2.620 16.46     1     4\n13:       Mazda RX4 Wag 21.00     6 160.0   110  3.90 2.875 17.02     1     4\n14:      Hornet 4 Drive 21.40     6 258.0   110  3.08 3.215 19.44     0     3\n15:             Valiant 18.10     6 225.0   105  2.76 3.460 20.22     0     3\n16:            Merc 280 19.20     6 167.6   123  3.92 3.440 18.30     0     4\n17:           Merc 280C 17.80     6 167.6   123  3.92 3.440 18.90     0     4\n18:        Ferrari Dino 19.70     6 145.0   175  3.62 2.770 15.50     1     5\n19:   Hornet Sportabout 18.70     8 360.0   175  3.15 3.440 17.02     0     3\n20:          Duster 360 14.30     8 360.0   245  3.21 3.570 15.84     0     3\n21:          Merc 450SE 16.40     8 275.8   180  3.07 4.070 17.40     0     3\n22:          Merc 450SL 17.30     8 275.8   180  3.07 3.730 17.60     0     3\n23:         Merc 450SLC 15.20     8 275.8   180  3.07 3.780 18.00     0     3\n24:  Cadillac Fleetwood 10.40     8 472.0   205  2.93 5.250 17.98     0     3\n25: Lincoln Continental 10.40     8 460.0   215  3.00 5.424 17.82     0     3\n26:   Chrysler Imperial 14.70     8 440.0   230  3.23 5.345 17.42     0     3\n27:    Dodge Challenger 15.50     8 318.0   150  2.76 3.520 16.87     0     3\n28:         AMC Javelin 15.20     8 304.0   150  3.15 3.435 17.30     0     3\n29:          Camaro Z28 13.30     8 350.0   245  3.73 3.840 15.41     0     3\n30:    Pontiac Firebird 19.20     8 400.0   175  3.08 3.845 17.05     0     3\n31:      Ford Pantera L 15.80     8 351.0   264  4.22 3.170 14.50     1     5\n32:       Maserati Bora 15.00     8 301.0   335  3.54 3.570 14.60     1     5\n                  model   mpg   cyl  disp    hp  drat    wt  qsec    am  gear\n    efficiency\n         <num>\n 1:   9.827586\n 2:   7.648903\n 3:   7.238095\n 4:  14.727273\n 5:  18.823529\n 6:  18.474114\n 7:   8.722110\n 8:  14.108527\n 9:  12.149533\n10:  20.092531\n11:   7.697842\n12:   8.015267\n13:   7.304348\n14:   6.656299\n15:   5.231214\n16:   5.581395\n17:   5.174419\n18:   7.111913\n19:   5.436047\n20:   4.005602\n21:   4.029484\n22:   4.638070\n23:   4.021164\n24:   1.980952\n25:   1.917404\n26:   2.750234\n27:   4.403409\n28:   4.425036\n29:   3.463542\n30:   4.993498\n31:   4.984227\n32:   4.201681\n    efficiency\n```\n\n\n:::\n\n```{.r .cell-code}\n# Fast subsetting using key\ndt_copy[.(6)]  # All rows where cyl == 6\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nKey: <cyl>\n            model   mpg   cyl  disp    hp  drat    wt  qsec    am  gear\n           <char> <num> <num> <num> <num> <num> <num> <num> <num> <num>\n1:      Mazda RX4  21.0     6 160.0   110  3.90 2.620 16.46     1     4\n2:  Mazda RX4 Wag  21.0     6 160.0   110  3.90 2.875 17.02     1     4\n3: Hornet 4 Drive  21.4     6 258.0   110  3.08 3.215 19.44     0     3\n4:        Valiant  18.1     6 225.0   105  2.76 3.460 20.22     0     3\n5:       Merc 280  19.2     6 167.6   123  3.92 3.440 18.30     0     4\n6:      Merc 280C  17.8     6 167.6   123  3.92 3.440 18.90     0     4\n7:   Ferrari Dino  19.7     6 145.0   175  3.62 2.770 15.50     1     5\n   efficiency\n        <num>\n1:   8.015267\n2:   7.304348\n3:   6.656299\n4:   5.231214\n5:   5.581395\n6:   5.174419\n7:   7.111913\n```\n\n\n:::\n\n```{.r .cell-code}\n# Multiple keys\nsetkey(dt_copy, cyl, gear)\ndt_copy[.(6, 4)]  # All rows where cyl == 6 and gear == 4\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nKey: <cyl, gear>\n           model   mpg   cyl  disp    hp  drat    wt  qsec    am  gear\n          <char> <num> <num> <num> <num> <num> <num> <num> <num> <num>\n1:     Mazda RX4  21.0     6 160.0   110  3.90 2.620 16.46     1     4\n2: Mazda RX4 Wag  21.0     6 160.0   110  3.90 2.875 17.02     1     4\n3:      Merc 280  19.2     6 167.6   123  3.92 3.440 18.30     0     4\n4:     Merc 280C  17.8     6 167.6   123  3.92 3.440 18.90     0     4\n   efficiency\n        <num>\n1:   8.015267\n2:   7.304348\n3:   5.581395\n4:   5.174419\n```\n\n\n:::\n:::\n\n\n\n### Joins in data.table\n\ndata.table provides efficient joins using keys:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create sample data.tables\nmanufacturers <- data.table(\n  make = c(\"Honda\", \"Toyota\", \"Ford\", \"BMW\", \"Mercedes\"),\n  country = c(\"Japan\", \"Japan\", \"USA\", \"Germany\", \"Germany\")\n)\n\ncars <- data.table(\n  model = c(\"Civic\", \"Corolla\", \"Focus\", \"3 Series\", \"Fiesta\"),\n  make = c(\"Honda\", \"Toyota\", \"Ford\", \"BMW\", \"Ford\")\n)\n\n# Set keys for joining\nsetkey(manufacturers, make)\nsetkey(cars, make)\n\n# Inner join\ncars[manufacturers]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nKey: <make>\n      model     make country\n     <char>   <char>  <char>\n1: 3 Series      BMW Germany\n2:    Focus     Ford     USA\n3:   Fiesta     Ford     USA\n4:    Civic    Honda   Japan\n5:     <NA> Mercedes Germany\n6:  Corolla   Toyota   Japan\n```\n\n\n:::\n\n```{.r .cell-code}\n# Left join\nmanufacturers[cars, nomatch=NA]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nKey: <make>\n     make country    model\n   <char>  <char>   <char>\n1:    BMW Germany 3 Series\n2:   Ford     USA    Focus\n3:   Ford     USA   Fiesta\n4:  Honda   Japan    Civic\n5: Toyota   Japan  Corolla\n```\n\n\n:::\n\n```{.r .cell-code}\n# Non-equi joins\ndt_cars[dt_cars[, .(max_mpg = max(mpg)), by = cyl], on = .(mpg = max_mpg, cyl)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n              model   mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear\n             <char> <num> <num> <num> <num> <num> <num> <num> <num> <num> <num>\n1:   Hornet 4 Drive  21.4     6 258.0   110  3.08 3.215 19.44     1     0     3\n2:   Toyota Corolla  33.9     4  71.1    65  4.22 1.835 19.90     1     1     4\n3: Pontiac Firebird  19.2     8 400.0   175  3.08 3.845 17.05     0     0     3\n    carb\n   <num>\n1:     1\n2:     1\n3:     2\n```\n\n\n:::\n:::\n\n\n\n### Reshaping data\n\ndata.table provides functions for reshaping data:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a sample data.table\ndt <- data.table(\n  id = rep(1:3, each = 2),\n  variable = rep(c(\"height\", \"weight\"), 3),\n  value = c(170, 68, 155, 52, 182, 75)\n)\ndt\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      id variable value\n   <int>   <char> <num>\n1:     1   height   170\n2:     1   weight    68\n3:     2   height   155\n4:     2   weight    52\n5:     3   height   182\n6:     3   weight    75\n```\n\n\n:::\n\n```{.r .cell-code}\n# Wide to long\ndt_wide <- dcast(dt, id ~ variable, value.var = \"value\")\ndt_wide\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nKey: <id>\n      id height weight\n   <int>  <num>  <num>\n1:     1    170     68\n2:     2    155     52\n3:     3    182     75\n```\n\n\n:::\n\n```{.r .cell-code}\n# Long to wide\ndt_long <- melt(dt_wide, id.vars = \"id\", variable.name = \"measure\", value.name = \"value\")\ndt_long\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      id measure value\n   <int>  <fctr> <num>\n1:     1  height   170\n2:     2  height   155\n3:     3  height   182\n4:     1  weight    68\n5:     2  weight    52\n6:     3  weight    75\n```\n\n\n:::\n:::\n\n\n\n### Performance Benefits\n\ndata.table is designed for performance:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a larger dataset for demonstration\nset.seed(123)\nn <- 1e6\ndt_large <- data.table(\n  id = 1:n,\n  x = sample(1:100, n, replace = TRUE),\n  y = sample(letters[1:5], n, replace = TRUE)\n)\n\n# Measure time for a grouped operation\nsystem.time(dt_large[, .(mean_x = mean(x)), by = y])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   user  system elapsed \n   0.08    0.05    0.02 \n```\n\n\n:::\n\n```{.r .cell-code}\n# Compare with equivalent dplyr operation (if dplyr is installed)\ndf_large <- as.data.frame(dt_large)\nsystem.time(dplyr::summarise(dplyr::group_by(df_large, y), mean_x = mean(x)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   user  system elapsed \n   0.15    0.03    0.20 \n```\n\n\n:::\n:::\n\n\n\ndata.table is particularly valuable when working with large datasets due to its efficient memory usage and optimized C implementation.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}