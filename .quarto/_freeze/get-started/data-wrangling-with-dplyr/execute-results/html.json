{
  "hash": "3cf8892dd2297d9a1493004e8f0e8c3a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data Wrangling with dplyr\"\ndate: \"2025-03-30\"\ncategories: [R, Data Manipulation, dplyr]\nimage: \"../images/dplyr.png\"\nexecute:\n  echo: true\n  warning: false\n  message: false\n  eval: true\n---\n\n\n\nThe `dplyr` package is part of the tidyverse and provides a grammar for data manipulation in R. This post demonstrates essential data wrangling techniques using built-in datasets.\n\n## Setup\n\nFirst, load the necessary packages:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(knitr)\n```\n:::\n\n\n\n## Working with the mtcars Dataset\n\nThe built-in `mtcars` dataset is used for examples:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Look at the mtcars data\nglimpse(mtcars)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 32\nColumns: 11\n$ mpg  <dbl> 21.0, 21.0, 22.8, 21.4, 18.7, 18.1, 14.3, 24.4, 22.8, 19.2, 17.8,…\n$ cyl  <dbl> 6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 8,…\n$ disp <dbl> 160.0, 160.0, 108.0, 258.0, 360.0, 225.0, 360.0, 146.7, 140.8, 16…\n$ hp   <dbl> 110, 110, 93, 110, 175, 105, 245, 62, 95, 123, 123, 180, 180, 180…\n$ drat <dbl> 3.90, 3.90, 3.85, 3.08, 3.15, 2.76, 3.21, 3.69, 3.92, 3.92, 3.92,…\n$ wt   <dbl> 2.620, 2.875, 2.320, 3.215, 3.440, 3.460, 3.570, 3.190, 3.150, 3.…\n$ qsec <dbl> 16.46, 17.02, 18.61, 19.44, 17.02, 20.22, 15.84, 20.00, 22.90, 18…\n$ vs   <dbl> 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0,…\n$ am   <dbl> 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0,…\n$ gear <dbl> 4, 4, 4, 3, 3, 3, 3, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4, 4, 3, 3,…\n$ carb <dbl> 4, 4, 1, 1, 2, 1, 4, 2, 2, 4, 4, 3, 3, 3, 4, 4, 4, 1, 2, 1, 1, 2,…\n```\n\n\n:::\n:::\n\n\n\n## Basic dplyr Functions\n\n### Filtering Rows\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Find all cars with 6 cylinders\nsix_cyl <- mtcars %>% \n  filter(cyl == 6)\n\n# Show the first few rows\nhead(six_cyl) %>%\n  kable()\n```\n\n::: {.cell-output-display}\n\n\n|               |  mpg| cyl|  disp|  hp| drat|    wt|  qsec| vs| am| gear| carb|\n|:--------------|----:|---:|-----:|---:|----:|-----:|-----:|--:|--:|----:|----:|\n|Mazda RX4      | 21.0|   6| 160.0| 110| 3.90| 2.620| 16.46|  0|  1|    4|    4|\n|Mazda RX4 Wag  | 21.0|   6| 160.0| 110| 3.90| 2.875| 17.02|  0|  1|    4|    4|\n|Hornet 4 Drive | 21.4|   6| 258.0| 110| 3.08| 3.215| 19.44|  1|  0|    3|    1|\n|Valiant        | 18.1|   6| 225.0| 105| 2.76| 3.460| 20.22|  1|  0|    3|    1|\n|Merc 280       | 19.2|   6| 167.6| 123| 3.92| 3.440| 18.30|  1|  0|    4|    4|\n|Merc 280C      | 17.8|   6| 167.6| 123| 3.92| 3.440| 18.90|  1|  0|    4|    4|\n\n\n:::\n:::\n\n\n\n### Selecting Columns\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Select only specific columns\ncar_data <- mtcars %>% \n  select(mpg, cyl, hp, wt)\n\nhead(car_data) %>%\n  kable()\n```\n\n::: {.cell-output-display}\n\n\n|                  |  mpg| cyl|  hp|    wt|\n|:-----------------|----:|---:|---:|-----:|\n|Mazda RX4         | 21.0|   6| 110| 2.620|\n|Mazda RX4 Wag     | 21.0|   6| 110| 2.875|\n|Datsun 710        | 22.8|   4|  93| 2.320|\n|Hornet 4 Drive    | 21.4|   6| 110| 3.215|\n|Hornet Sportabout | 18.7|   8| 175| 3.440|\n|Valiant           | 18.1|   6| 105| 3.460|\n\n\n:::\n:::\n\n\n\n### Arranging Rows\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Find the cars with best fuel efficiency\nmost_efficient <- mtcars %>% \n  arrange(desc(mpg)) %>%\n  select(mpg, cyl, hp, wt)\n\nhead(most_efficient) %>%\n  kable()\n```\n\n::: {.cell-output-display}\n\n\n|               |  mpg| cyl|  hp|    wt|\n|:--------------|----:|---:|---:|-----:|\n|Toyota Corolla | 33.9|   4|  65| 1.835|\n|Fiat 128       | 32.4|   4|  66| 2.200|\n|Honda Civic    | 30.4|   4|  52| 1.615|\n|Lotus Europa   | 30.4|   4| 113| 1.513|\n|Fiat X1-9      | 27.3|   4|  66| 1.935|\n|Porsche 914-2  | 26.0|   4|  91| 2.140|\n\n\n:::\n:::\n\n\n\n### Creating New Variables\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate power-to-weight ratio\ncar_stats <- mtcars %>% \n  mutate(\n    power_to_weight = hp / wt,\n    efficiency_score = mpg * (1/wt)\n  ) %>%\n  select(mpg, hp, wt, power_to_weight, efficiency_score)\n\nhead(car_stats) %>%\n  kable()\n```\n\n::: {.cell-output-display}\n\n\n|                  |  mpg|  hp|    wt| power_to_weight| efficiency_score|\n|:-----------------|----:|---:|-----:|---------------:|----------------:|\n|Mazda RX4         | 21.0| 110| 2.620|        41.98473|         8.015267|\n|Mazda RX4 Wag     | 21.0| 110| 2.875|        38.26087|         7.304348|\n|Datsun 710        | 22.8|  93| 2.320|        40.08621|         9.827586|\n|Hornet 4 Drive    | 21.4| 110| 3.215|        34.21462|         6.656299|\n|Hornet Sportabout | 18.7| 175| 3.440|        50.87209|         5.436046|\n|Valiant           | 18.1| 105| 3.460|        30.34682|         5.231214|\n\n\n:::\n:::\n\n\n\n### Summarizing Data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate average stats by cylinder count\ncyl_stats <- mtcars %>% \n  group_by(cyl) %>%\n  summarize(\n    avg_mpg = mean(mpg),\n    avg_hp = mean(hp),\n    count = n()\n  ) %>%\n  arrange(cyl)\n\ncyl_stats %>%\n  kable()\n```\n\n::: {.cell-output-display}\n\n\n| cyl|  avg_mpg|    avg_hp| count|\n|---:|--------:|---------:|-----:|\n|   4| 26.66364|  82.63636|    11|\n|   6| 19.74286| 122.28571|     7|\n|   8| 15.10000| 209.21429|    14|\n\n\n:::\n:::\n\n\n\n## Visualizing the Results\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot average mpg by cylinder count\nggplot(cyl_stats, aes(x = factor(cyl), y = avg_mpg)) +\n  geom_col(aes(fill = avg_hp)) +\n  geom_text(aes(label = round(avg_mpg, 1)), vjust = -0.5) +\n  scale_fill_viridis_c() +\n  labs(\n    title = \"Average Fuel Efficiency by Cylinder Count\",\n    subtitle = \"Color indicates average horsepower\",\n    x = \"Number of Cylinders\",\n    y = \"Average MPG\",\n    fill = \"Avg. Horsepower\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](data-wrangling-with-dplyr_files/figure-html/visualization-1.png){width=960}\n:::\n:::\n\n\n\n## Working with the iris Dataset\n\nThe following example explores another built-in dataset, `iris`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Look at the iris data\nglimpse(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 150\nColumns: 5\n$ Sepal.Length <dbl> 5.1, 4.9, 4.7, 4.6, 5.0, 5.4, 4.6, 5.0, 4.4, 4.9, 5.4, 4.…\n$ Sepal.Width  <dbl> 3.5, 3.0, 3.2, 3.1, 3.6, 3.9, 3.4, 3.4, 2.9, 3.1, 3.7, 3.…\n$ Petal.Length <dbl> 1.4, 1.4, 1.3, 1.5, 1.4, 1.7, 1.4, 1.5, 1.4, 1.5, 1.5, 1.…\n$ Petal.Width  <dbl> 0.2, 0.2, 0.2, 0.2, 0.2, 0.4, 0.3, 0.2, 0.2, 0.1, 0.2, 0.…\n$ Species      <fct> setosa, setosa, setosa, setosa, setosa, setosa, setosa, s…\n```\n\n\n:::\n:::\n\n\n\n### Filtering and Grouping\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate average measurements by species\niris_stats <- iris %>%\n  group_by(Species) %>%\n  summarize(\n    avg_sepal_length = mean(Sepal.Length),\n    avg_sepal_width = mean(Sepal.Width),\n    avg_petal_length = mean(Petal.Length),\n    avg_petal_width = mean(Petal.Width),\n    count = n()\n  )\n\niris_stats %>%\n  kable()\n```\n\n::: {.cell-output-display}\n\n\n|Species    | avg_sepal_length| avg_sepal_width| avg_petal_length| avg_petal_width| count|\n|:----------|----------------:|---------------:|----------------:|---------------:|-----:|\n|setosa     |            5.006|           3.428|            1.462|           0.246|    50|\n|versicolor |            5.936|           2.770|            4.260|           1.326|    50|\n|virginica  |            6.588|           2.974|            5.552|           2.026|    50|\n\n\n:::\n:::\n\n\n\n### Visualizing Iris Data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a scatter plot with multiple dimensions\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +\n  geom_point(size = 3, alpha = 0.7) +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  labs(\n    title = \"Iris Dataset: Sepal Dimensions by Species\",\n    x = \"Sepal Length (cm)\",\n    y = \"Sepal Width (cm)\"\n  ) +\n  theme_minimal() +\n  facet_wrap(~Species)\n```\n\n::: {.cell-output-display}\n![](data-wrangling-with-dplyr_files/figure-html/iris-visualization-1.png){width=960}\n:::\n:::\n\n\n\n## Conclusion\n\nThe `dplyr` package provides a consistent and intuitive way to manipulate data in R. These basic functions can easily be used to develop more complex workflows!",
    "supporting": [
      "data-wrangling-with-dplyr_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}