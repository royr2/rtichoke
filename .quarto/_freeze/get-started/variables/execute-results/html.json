{
  "hash": "80a49d30c0880d170a6d3c6187e12626",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Variables in R\"\ndescription: \"Learn how to create and work with variables in R\"\ndate: \"2025-03-30\"\ncategories: [basics, r-programming]\nimage: \"https://raw.githubusercontent.com/rstudio/hex-stickers/master/PNG/RStudio.png\"\nexecute:\n  echo: true\n  warning: false\n  message: false\n  eval: true\n---\n\n\n\nVariables in R store data that can be referenced and manipulated throughout code. The following demonstrates how to create and work with variables:\n\n### Basic Assignment\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Using the assignment operator (<-)\nx <- 10\ny <- \"Hello, R!\"\nz <- TRUE\n\n# Print the variables\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10\n```\n\n\n:::\n\n```{.r .cell-code}\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Hello, R!\"\n```\n\n\n:::\n\n```{.r .cell-code}\nz\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\n### Alternative Assignment Methods\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Using the equals sign (=)\nage = 25\n\n# Using the assignment operator in reverse (->)\n\"Data Scientist\" -> job_title\n\n# Print the variables\nage\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 25\n```\n\n\n:::\n\n```{.r .cell-code}\njob_title\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Data Scientist\"\n```\n\n\n:::\n:::\n\n\n\n### Variable Naming Rules\n\n-   Names can contain letters, numbers, dots (.) and underscores (\\_)\n-   Names must start with a letter or a dot\n-   If a name starts with a dot, it cannot be followed by a number\n-   Names are case-sensitive (`Value` and `value` are different variables)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Valid variable names\nvalid_name <- 1\nvalidName <- 2\nvalid.name <- 3\n.hidden <- 4\n\n# Print variables\nvalid_name\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n\n```{.r .cell-code}\nvalidName\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n\n```{.r .cell-code}\nvalid.name\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n\n```{.r .cell-code}\n.hidden\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n:::\n\n\n\n### Data Types\n\nR has several basic data types:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Numeric\nnum <- 42.5\ntypeof(num)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"double\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# Integer (note the L suffix)\nint <- 42L\ntypeof(int)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"integer\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# Character\ntext <- \"R programming\"\ntypeof(text)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# Logical\nflag <- TRUE\ntypeof(flag)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"logical\"\n```\n\n\n:::\n:::\n\n\n\n### Checking and Converting Types\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check if a variable is of a specific type\nis.numeric(num)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\nis.character(text)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\n# Convert between types\nas.character(num)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"42.5\"\n```\n\n\n:::\n\n```{.r .cell-code}\nas.numeric(\"100\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 100\n```\n\n\n:::\n\n```{.r .cell-code}\nas.logical(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\n### Variable Information\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get information about a variable\nx <- c(1, 2, 3, 4, 5)\nclass(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"numeric\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlength(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5\n```\n\n\n:::\n\n```{.r .cell-code}\nstr(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n num [1:5] 1 2 3 4 5\n```\n\n\n:::\n:::\n\n\n\nNote that R is dynamically typed, so variables can change types during execution. This flexibility is one of R's strengths for data analysis.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}