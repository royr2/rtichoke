{
  "hash": "793af456fbec733cb48bff3f831d5da5",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Parallel Computing in R\"\ndescription: \"Learn how to speed up your R code using parallel computing\"\ndate: \"2025-04-26\"\ncategories: [performance, r-programming]\nimage: \"https://raw.githubusercontent.com/rstudio/hex-stickers/master/PNG/RStudio.png\"\nexecute:\n  echo: true\n  warning: false\n  message: false\n  eval: true\n---\n\n\n\n\n## Packages\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Install packages if needed (uncomment to run)\n# install.packages(c(\"parallel\", \"foreach\", \"doParallel\", \"tictoc\"))\n\n# Load the essential packages\nlibrary(parallel)    # Base R parallel functions\nlibrary(foreach)     # For parallel loops\nlibrary(doParallel)  # Backend for foreach\nlibrary(tictoc)      # For timing comparisons\n```\n:::\n\n\n\n\n## Detecting Available CPU Cores\n\nThe first step involves checking how many CPU cores are available on the system:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Detect the number of CPU cores\ndetectCores()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 16\n```\n\n\n:::\n:::\n\n\n\n\nGood practice dictates leaving one core free for the operating system, so typically `detectCores() - 1` is used for parallel operations.\n\n## The Basics\n\nThis section demonstrates creating a simple function that takes time to execute, then compares sequential versus parallel execution times:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# A function that takes time to execute\nslow_function <- function(x) {\n  Sys.sleep(0.5)  # Simulate computation time (half a second)\n  return(x^2)     # Return the square of x\n}\n\n# Create a list of numbers to process\nnumbers <- 1:10\n```\n:::\n\n\n\n\n### Method 1: Using parLapply (Works on All Systems)\n\nThis method works on all operating systems including Windows:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Step 1: Create a cluster of workers\ncl <- makeCluster(detectCores() - 1)\n\n# Step 2: Export any functions our workers need\nclusterExport(cl, \"slow_function\")\n\n# Run the sequential version and time it\ntic(\"Sequential version\")\nresult_sequential <- lapply(numbers, slow_function)\ntoc()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSequential version: 5.05 sec elapsed\n```\n\n\n:::\n\n```{.r .cell-code}\n# Run the parallel version and time it\ntic(\"Parallel version\")\nresult_parallel <- parLapply(cl, numbers, slow_function)\ntoc()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nParallel version: 0.5 sec elapsed\n```\n\n\n:::\n\n```{.r .cell-code}\n# Step 3: Always stop the cluster when finished!\nstopCluster(cl)\n\n# Verify both methods give the same results\nall.equal(result_sequential, result_parallel)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\n\n### Method 2: Using mclapply (Unix/Mac Only)\n\nFor Mac or Linux systems, this simpler approach can be utilized:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# For Mac/Linux users only\ntic(\"Parallel mclapply (Mac/Linux only)\")\nresult_parallel <- mclapply(numbers, slow_function, mc.cores = detectCores() - 1)\ntoc()\n```\n:::\n\n\n\n\n## The foreach Package: A More Intuitive Approach\n\nMany R practitioners find the `foreach` package easier to understand and implement. The package functions like a loop but can execute in parallel:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Step 1: Create and register a parallel backend\ncl <- makeCluster(detectCores() - 1)\nregisterDoParallel(cl)\n\n# Run sequential foreach with %do%\ntic(\"Sequential foreach\")\nresult_sequential <- foreach(i = 1:10) %do% {\n  slow_function(i)\n}\ntoc()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSequential foreach: 5.04 sec elapsed\n```\n\n\n:::\n\n```{.r .cell-code}\n# Run parallel foreach with %dopar%\ntic(\"Parallel foreach\")\nresult_parallel <- foreach(i = 1:10) %dopar% {\n  slow_function(i)\n}\ntoc()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nParallel foreach: 0.58 sec elapsed\n```\n\n\n:::\n\n```{.r .cell-code}\n# Always stop the cluster when finished\nstopCluster(cl)\n\n# Verify results\nall.equal(result_sequential, result_parallel)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\n\n### Combining Results with foreach\n\nOne notable feature of `foreach` is the ease with which results can be combined:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create and register a parallel backend\ncl <- makeCluster(detectCores() - 1)\nregisterDoParallel(cl)\n\n# Sum all results automatically with .combine='+'\ntic(\"Parallel sum of squares\")\ntotal <- foreach(i = 1:100, .combine = '+') %dopar% {\n  i^2\n}\ntoc()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nParallel sum of squares: 0.11 sec elapsed\n```\n\n\n:::\n\n```{.r .cell-code}\n# Stop the cluster\nstopCluster(cl)\n\n# Verify the result\nprint(paste(\"Result obtained:\", total))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Result obtained: 338350\"\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(paste(\"Correct answer:\", sum((1:100)^2)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Correct answer: 338350\"\n```\n\n\n:::\n:::\n\n\n\n\n## Matrix Operations\n\nLet's try something more realistic. Matrix operations are perfect for parallelization:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# A more computationally intensive function\nmatrix_function <- function(n) {\n  # Create a random n×n matrix\n  m <- matrix(rnorm(n*n), ncol = n)\n  # Calculate eigenvalues (computationally expensive)\n  eigen(m)\n  return(sum(diag(m)))\n}\n\n# Let's process 8 matrices of size 300×300\nmatrix_sizes <- rep(300, 8)\n```\n:::\n\n\n\n\n### Performance Comparison\n\nLet's compare how different methods perform:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Sequential execution\ntic(\"Sequential\")\nsequential_result <- lapply(matrix_sizes, matrix_function)\nsequential_time <- toc(quiet = TRUE)\nsequential_time <- sequential_time$toc - sequential_time$tic\n\n# Parallel with parLapply\ncl <- makeCluster(detectCores() - 1)\nclusterExport(cl, \"matrix_function\")\ntic(\"parLapply\")\nparlapply_result <- parLapply(cl, matrix_sizes, matrix_function)\nparlapply_time <- toc(quiet = TRUE)\nparlapply_time <- parlapply_time$toc - parlapply_time$tic\nstopCluster(cl)\n\n# Parallel with foreach\ncl <- makeCluster(detectCores() - 1)\nregisterDoParallel(cl)\ntic(\"foreach\")\nforeach_result <- foreach(s = matrix_sizes) %dopar% {\n  matrix_function(s)\n}\nforeach_time <- toc(quiet = TRUE)\nforeach_time <- foreach_time$toc - foreach_time$tic\nstopCluster(cl)\n\n# Create a results table\nresults <- data.frame(\n  Method = c(\"Sequential\", \"parLapply\", \"foreach\"),\n  Time = c(sequential_time, parlapply_time, foreach_time),\n  Speedup = c(1, sequential_time/parlapply_time, sequential_time/foreach_time)\n)\n\n# Display the results\nresults\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      Method Time  Speedup\n1 Sequential 1.99 1.000000\n2  parLapply 0.22 9.045455\n3    foreach 0.27 7.370370\n```\n\n\n:::\n:::\n\n\n\n\n### Visualizing Results\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load ggplot2 for visualization\nlibrary(ggplot2)\n\n# Plot execution times\nggplot(results, aes(x = reorder(Method, -Time), y = Time, fill = Method)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Execution Time Comparison\",\n       x = \"Method\", y = \"Time (seconds)\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n```\n\n::: {.cell-output-display}\n![](parallel-computing-in-r_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Plot speedup\nggplot(results, aes(x = reorder(Method, Speedup), y = Speedup, fill = Method)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Speedup Comparison\",\n       x = \"Method\", y = \"Times faster than sequential\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n```\n\n::: {.cell-output-display}\n![](parallel-computing-in-r_files/figure-html/unnamed-chunk-10-2.png){width=672}\n:::\n:::\n\n\n\n\n## Practical Implementation\n\nParallel computing isn't always the optimal choice. Here are some considerations:\n\n**✅ Good for parallelization:**\n- Independent calculations (like applying the same function to different data chunks)\n- Computationally intensive tasks (simulations, bootstrap resampling)\n- Tasks that take more than a few seconds to run sequentially\n\n**❌ Not good for parallelization:**\n- Very quick operations (parallelization overhead may exceed the time saved)\n- Tasks with heavy dependencies between steps\n- I/O-bound operations (reading/writing files)\n\n## Best Practices\n\n1. Always stop clusters with `stopCluster(cl)` when processing is complete\n2. Leave one core free for the operating system\n3. Start small and test with a subset of data\n4. Monitor memory usage - each worker needs its own copy of the data",
    "supporting": [
      "parallel-computing-in-r_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}