{
  "hash": "f9b3e2aec0a17b9a8f0d4d47987ec3c0",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Reading Data into R\"\ndescription: \"Learn how to import data from various file formats using base R functions\"\ndate: \"2025-03-30\"\ncategories: [data-import, r-programming]\nimage: \"https://raw.githubusercontent.com/rstudio/hex-stickers/master/PNG/RStudio.png\"\nexecute:\n  echo: true\n  warning: false\n  message: false\n  eval: true\n---\n\n\n\nR provides built-in functions for importing data from various file formats. Here are the most common ones:\n\n## Reading CSV Files\n\nComma-separated values (CSV) files are one of the most common data formats:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a sample CSV file\nwrite.csv(mtcars[1:5, ], \"sample_cars.csv\", row.names = TRUE)\n\n# Read the CSV file\ncars_data <- read.csv(\"sample_cars.csv\")\nhead(cars_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                  X  mpg cyl disp  hp drat    wt  qsec vs am gear carb\n1         Mazda RX4 21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\n2     Mazda RX4 Wag 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\n3        Datsun 710 22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\n4    Hornet 4 Drive 21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\n5 Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\n```\n\n\n:::\n\n```{.r .cell-code}\n# Read with specific options\ncars_data2 <- read.csv(\"sample_cars.csv\", \n                      header = TRUE,       # First row contains column names\n                      sep = \",\",           # Separator is a comma\n                      stringsAsFactors = FALSE, # Don't convert strings to factors\n                      na.strings = c(\"NA\", \"N/A\", \"\")) # Values to treat as NA\nhead(cars_data2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                  X  mpg cyl disp  hp drat    wt  qsec vs am gear carb\n1         Mazda RX4 21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\n2     Mazda RX4 Wag 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\n3        Datsun 710 22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\n4    Hornet 4 Drive 21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\n5 Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\n```\n\n\n:::\n:::\n\n\n\n## Reading Tab-Delimited Files\n\nTab-delimited files are another common format:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a sample tab-delimited file\nwrite.table(mtcars[1:5, ], \"sample_cars.txt\", sep = \"\\t\", row.names = TRUE)\n\n# Read the tab-delimited file\ncars_data_tab <- read.delim(\"sample_cars.txt\")\nhead(cars_data_tab)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\n```\n\n\n:::\n\n```{.r .cell-code}\n# Or use read.table with tab separator\ncars_data_tab2 <- read.table(\"sample_cars.txt\", \n                            header = TRUE, \n                            sep = \"\\t\")\nhead(cars_data_tab2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\n```\n\n\n:::\n:::\n\n\n\n## Reading Fixed-Width Files\n\nFixed-width files have fields of consistent width:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a sample fixed-width file\ncat(\"John  Smith 35\\nMary  Jones 28\\nDavid Brown 42\\n\", file = \"sample_people.txt\")\n\n# Read the fixed-width file\npeople_data <- read.fwf(\"sample_people.txt\", \n                       widths = c(5, 6, 3),  # Width of each column\n                       col.names = c(\"First\", \"Last\", \"Age\"))\npeople_data\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  First   Last Age\n1 John   Smith  35\n2 Mary   Jones  28\n3 David  Brown  42\n```\n\n\n:::\n:::\n\n\n\n## Reading from R Data Files\n\nR has its own binary file format for saving and loading R objects:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Save R objects to a file\nsample_data <- list(x = 1:10, y = letters[1:10])\nsave(sample_data, file = \"sample_data.RData\")\n\n# Load the saved objects\nload(\"sample_data.RData\")\nsample_data\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$x\n [1]  1  2  3  4  5  6  7  8  9 10\n\n$y\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# Save a single object\nsaveRDS(mtcars[1:5, ], \"sample_cars.rds\")\n\n# Read the saved object\ncars_subset <- readRDS(\"sample_cars.rds\")\nhead(cars_subset)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\n```\n\n\n:::\n:::\n\n\n\n## Reading from URLs\n\nYou can read data directly from the web:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read CSV from a URL (example with a small dataset)\nurl <- \"https://raw.githubusercontent.com/datasets/iris/master/data/iris.csv\"\niris_data <- try(read.csv(url), silent = TRUE)\n\n# Check if the data was loaded successfully\nif (!inherits(iris_data, \"try-error\")) {\n  head(iris_data)\n} else {\n  print(\"Could not access the URL. Check your internet connection.\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Could not access the URL. Check your internet connection.\"\n```\n\n\n:::\n:::\n\n\n\n## Reading Excel Files\n\nWhile not part of base R, the `readxl` package is commonly used:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check if readxl is installed\nif (!requireNamespace(\"readxl\", quietly = TRUE)) {\n  message(\"The readxl package is not installed. You can install it with: install.packages('readxl')\")\n} else {\n  library(readxl)\n  # This would read an Excel file if it existed\n  # excel_data <- read_excel(\"sample.xlsx\", sheet = 1)\n}\n```\n:::\n\n\n\n## Reading from Databases\n\nBase R provides the `DBI` package for database connections:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Example of connecting to SQLite (not run)\n# if (!requireNamespace(\"RSQLite\", quietly = TRUE)) {\n#   message(\"The RSQLite package is not installed\")\n# } else {\n#   library(DBI)\n#   con <- dbConnect(RSQLite::SQLite(), \":memory:\")\n#   dbWriteTable(con, \"mtcars\", mtcars)\n#   data <- dbGetQuery(con, \"SELECT * FROM mtcars WHERE cyl = 4\")\n#   dbDisconnect(con)\n# }\n```\n:::\n\n\n\n## Handling File Paths\n\nR provides functions to work with file paths:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get current working directory\ngetwd()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"C:/Users/riddh/OneDrive/Desktop/rtichoke-github/get-started\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# List files in the current directory\nlist.files(pattern = \".csv\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"sample_cars.csv\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# Check if a file exists\nfile.exists(\"sample_cars.csv\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\n# Get full path to a file\nnormalizePath(\"sample_cars.csv\", mustWork = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"C:\\\\Users\\\\riddh\\\\OneDrive\\\\Desktop\\\\rtichoke-github\\\\get-started\\\\sample_cars.csv\"\n```\n\n\n:::\n:::\n\n\n\n## Cleaning Up\n\nLet's remove the sample files we created:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# List of files to remove\nfiles_to_remove <- c(\"sample_cars.csv\", \"sample_cars.txt\", \n                    \"sample_people.txt\", \"sample_data.RData\", \n                    \"sample_cars.rds\")\n\n# Remove files\nfor (file in files_to_remove) {\n  if (file.exists(file)) {\n    file.remove(file)\n  }\n}\n```\n:::\n\n\n\nRemember to check the documentation with `?read.csv` or similar commands to explore all available options for these functions.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}