{
  "hash": "22379f8347e707a755c55d452f6755fe",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Introduction to R for Analytics\"\ndate: \"2023-03-22\"\ncategories: [R, Analytics, Introduction]\nimage: \"../images/r-logo.png\"\nexecute:\n  echo: true\n  warning: false\n  message: false\n  eval: true\n---\n\n\n\nR is a powerful language specifically designed for data analysis and visualization. This guide demonstrates practical examples of using R for real-world analytics tasks.\n\n## Exploring a Dataset\n\nR comes with several built-in datasets perfect for practice. This example examines the `mtcars` dataset:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# View the first few rows\nhead(mtcars)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n```\n\n\n:::\n\n```{.r .cell-code}\n# Quick summary of the dataset structure\nstr(mtcars)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t32 obs. of  11 variables:\n $ mpg : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...\n $ cyl : num  6 6 4 6 8 6 8 4 4 6 ...\n $ disp: num  160 160 108 258 360 ...\n $ hp  : num  110 110 93 110 175 105 245 62 95 123 ...\n $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...\n $ wt  : num  2.62 2.88 2.32 3.21 3.44 ...\n $ qsec: num  16.5 17 18.6 19.4 17 ...\n $ vs  : num  0 0 1 1 0 1 0 1 1 1 ...\n $ am  : num  1 1 1 0 0 0 0 0 0 0 ...\n $ gear: num  4 4 4 3 3 3 3 4 4 4 ...\n $ carb: num  4 4 1 1 2 1 4 2 2 4 ...\n```\n\n\n:::\n\n```{.r .cell-code}\n# Statistical summary of key variables\nsummary(mtcars[, c(\"mpg\", \"wt\", \"hp\")])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      mpg              wt              hp       \n Min.   :10.40   Min.   :1.513   Min.   : 52.0  \n 1st Qu.:15.43   1st Qu.:2.581   1st Qu.: 96.5  \n Median :19.20   Median :3.325   Median :123.0  \n Mean   :20.09   Mean   :3.217   Mean   :146.7  \n 3rd Qu.:22.80   3rd Qu.:3.610   3rd Qu.:180.0  \n Max.   :33.90   Max.   :5.424   Max.   :335.0  \n```\n\n\n:::\n:::\n\n\n\nThe `mtcars` dataset contains information about 32 cars from Motor Trend magazine, including fuel efficiency (mpg), weight (wt), and horsepower (hp).\n\n## Data Visualization\n\nVisualization is essential for understanding patterns in data. The following examples create informative plots:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\n# 1. A scatter plot with regression line\np1 <- ggplot(mtcars, aes(x = wt, y = mpg)) +\n  geom_point(aes(size = hp, color = factor(cyl)), alpha = 0.7) +\n  geom_smooth(method = \"lm\", formula = y ~ x, color = \"#2c3e50\") +\n  labs(title = \"Car Weight vs. Fuel Efficiency\",\n       subtitle = \"Size represents horsepower, color represents cylinders\",\n       x = \"Weight (1000 lbs)\",\n       y = \"Miles Per Gallon\") +\n  theme_minimal() +\n  scale_color_brewer(palette = \"Set1\", name = \"Cylinders\")\n\n# 2. Distribution of fuel efficiency\np2 <- ggplot(mtcars, aes(x = mpg, fill = factor(cyl))) +\n  geom_histogram(bins = 10, alpha = 0.7, position = \"identity\") +\n  labs(title = \"Distribution of Fuel Efficiency\",\n       x = \"Miles Per Gallon\",\n       y = \"Count\") +\n  scale_fill_brewer(palette = \"Set1\", name = \"Cylinders\") +\n  theme_minimal()\n\n# Display plots (if using patchwork)\nlibrary(patchwork)\np1 / p2\n```\n\n::: {.cell-output-display}\n![](intro-to-r-analytics_files/figure-html/basic-visualizations-1.png){width=960}\n:::\n:::\n\n\n\nThese visualizations reveal:\n\n-   A clear negative correlation between car weight and fuel efficiency\n-   Higher cylinder cars tend to be heavier with lower MPG\n-   The MPG distribution varies significantly by cylinder count\n\n## Data Transformation\n\nData rarely comes in the exact format needed. The `dplyr` package makes transformations straightforward:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load required packages\nlibrary(dplyr)\nlibrary(tibble)  # For rownames_to_column function\n\n# Create an enhanced version of the dataset\nmtcars_enhanced <- mtcars %>%\n  # Add car names as a column (they're currently row names)\n  rownames_to_column(\"car_name\") %>%\n  # Create useful derived metrics\n  mutate(\n    # Efficiency ratio (higher is better)\n    efficiency_ratio = mpg / wt,\n    \n    # Power-to-weight ratio (higher is better)\n    power_to_weight = hp / wt,\n    \n    # Categorize cars by efficiency\n    efficiency_category = case_when(\n      mpg > 25 ~ \"High Efficiency\",\n      mpg > 15 ~ \"Medium Efficiency\",\n      TRUE ~ \"Low Efficiency\"\n    )\n  ) %>%\n  # Arrange from most to least efficient\n  arrange(desc(efficiency_ratio))\n\n# Display the top 5 most efficient cars\nhead(mtcars_enhanced[, c(\"car_name\", \"mpg\", \"wt\", \"hp\", \"efficiency_ratio\", \"efficiency_category\")], 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        car_name  mpg    wt  hp efficiency_ratio efficiency_category\n1   Lotus Europa 30.4 1.513 113         20.09253     High Efficiency\n2    Honda Civic 30.4 1.615  52         18.82353     High Efficiency\n3 Toyota Corolla 33.9 1.835  65         18.47411     High Efficiency\n4       Fiat 128 32.4 2.200  66         14.72727     High Efficiency\n5      Fiat X1-9 27.3 1.935  66         14.10853     High Efficiency\n```\n\n\n:::\n:::\n\n\n\n## Answering Business Questions with Data\n\nThe enhanced dataset can be used to answer practical questions:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Question 1: What are the average characteristics by cylinder count?\ncylinder_analysis <- mtcars_enhanced %>%\n  group_by(cyl) %>%\n  summarize(\n    count = n(),\n    avg_mpg = mean(mpg),\n    avg_weight = mean(wt),\n    avg_horsepower = mean(hp),\n    avg_efficiency_ratio = mean(efficiency_ratio),\n    avg_power_to_weight = mean(power_to_weight)\n  ) %>%\n  arrange(cyl)\n\n# Display the results\ncylinder_analysis\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 7\n    cyl count avg_mpg avg_weight avg_horsepower avg_efficiency_ratio\n  <dbl> <int>   <dbl>      <dbl>          <dbl>                <dbl>\n1     4    11    26.7       2.29           82.6                12.7 \n2     6     7    19.7       3.12          122.                  6.44\n3     8    14    15.1       4.00          209.                  3.95\n# ℹ 1 more variable: avg_power_to_weight <dbl>\n```\n\n\n:::\n\n```{.r .cell-code}\n# Question 2: Which transmission type is more fuel efficient?\ntransmission_efficiency <- mtcars_enhanced %>%\n  # am: 0 = automatic, 1 = manual\n  mutate(transmission = if_else(am == 1, \"Manual\", \"Automatic\")) %>%\n  group_by(transmission) %>%\n  summarize(\n    count = n(),\n    avg_mpg = mean(mpg),\n    median_mpg = median(mpg),\n    mpg_std_dev = sd(mpg)\n  )\n\n# Display the results\ntransmission_efficiency\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 5\n  transmission count avg_mpg median_mpg mpg_std_dev\n  <chr>        <int>   <dbl>      <dbl>       <dbl>\n1 Automatic       19    17.1       17.3        3.83\n2 Manual          13    24.4       22.8        6.17\n```\n\n\n:::\n\n```{.r .cell-code}\n# Visualize the difference\nggplot(mtcars, aes(x = factor(am, labels = c(\"Automatic\", \"Manual\")), y = mpg, fill = factor(am))) +\n  geom_boxplot(alpha = 0.7) +\n  geom_jitter(width = 0.1, alpha = 0.5) +\n  labs(title = \"Fuel Efficiency by Transmission Type\",\n       x = \"Transmission Type\",\n       y = \"Miles Per Gallon\") +\n  theme_minimal() +\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](intro-to-r-analytics_files/figure-html/business-analysis-1.png){width=672}\n:::\n:::\n\n\n\n## Correlation Analysis for Decision Making\n\nUnderstanding relationships between variables is crucial for business decisions:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate correlations\ncor_matrix <- cor(mtcars[, c(\"mpg\", \"wt\", \"hp\", \"disp\", \"qsec\")])\ncor_df <- round(cor_matrix, 2)\n\n# Display correlation matrix\ncor_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       mpg    wt    hp  disp  qsec\nmpg   1.00 -0.87 -0.78 -0.85  0.42\nwt   -0.87  1.00  0.66  0.89 -0.17\nhp   -0.78  0.66  1.00  0.79 -0.71\ndisp -0.85  0.89  0.79  1.00 -0.43\nqsec  0.42 -0.17 -0.71 -0.43  1.00\n```\n\n\n:::\n\n```{.r .cell-code}\n# Visualize correlations (requires the corrplot package)\nlibrary(corrplot)\ncorrplot(cor_matrix, method = \"circle\", type = \"upper\", \n         tl.col = \"black\", tl.srt = 45, addCoef.col = \"black\")\n```\n\n::: {.cell-output-display}\n![](intro-to-r-analytics_files/figure-html/correlation-analysis-1.png){width=864}\n:::\n\n```{.r .cell-code}\n# Scatter plot matrix of key variables\npairs(mtcars[, c(\"mpg\", \"wt\", \"hp\", \"disp\")], \n      main = \"Scatter Plot Matrix of Key Variables\",\n      pch = 21, bg = \"lightblue\", cex = 1.2)\n```\n\n::: {.cell-output-display}\n![](intro-to-r-analytics_files/figure-html/correlation-analysis-2.png){width=864}\n:::\n:::\n\n\n\n## Working with Real-World Datasets\n\nThe famous Iris dataset demonstrates a complete workflow:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load packages\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(ggplot2)\n\n# Examine the dataset\nhead(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n```\n\n\n:::\n\n```{.r .cell-code}\nstr(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t150 obs. of  5 variables:\n $ Sepal.Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...\n $ Sepal.Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...\n $ Petal.Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...\n $ Petal.Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...\n $ Species     : Factor w/ 3 levels \"setosa\",\"versicolor\",..: 1 1 1 1 1 1 1 1 1 1 ...\n```\n\n\n:::\n\n```{.r .cell-code}\n# Calculate summary statistics by species\niris_stats <- iris %>%\n  group_by(Species) %>%\n  summarize(across(where(is.numeric), \n                   list(mean = mean, \n                        median = median,\n                        sd = sd,\n                        min = min,\n                        max = max)))\n\n# View summary for Sepal.Length\niris_stats %>% select(Species, starts_with(\"Sepal.Length\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 6\n  Species Sepal.Length_mean Sepal.Length_median Sepal.Length_sd Sepal.Length_min\n  <fct>               <dbl>               <dbl>           <dbl>            <dbl>\n1 setosa               5.01                 5             0.352              4.3\n2 versic…              5.94                 5.9           0.516              4.9\n3 virgin…              6.59                 6.5           0.636              4.9\n# ℹ 1 more variable: Sepal.Length_max <dbl>\n```\n\n\n:::\n\n```{.r .cell-code}\n# Create a visualization comparing all measurements across species\niris_long <- iris %>%\n  pivot_longer(\n    cols = -Species,\n    names_to = \"Measurement\",\n    values_to = \"Value\"\n  )\n\n# Box plots with data points\nggplot(iris_long, aes(x = Species, y = Value, fill = Species)) +\n  geom_boxplot(alpha = 0.6) +\n  geom_jitter(width = 0.15, alpha = 0.5, color = \"darkgrey\") +\n  facet_wrap(~Measurement, scales = \"free_y\") +\n  labs(title = \"Iris Measurements Across Species\",\n       subtitle = \"Box plots with individual observations\") +\n  theme_minimal() +\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](intro-to-r-analytics_files/figure-html/iris-analysis-1.png){width=960}\n:::\n\n```{.r .cell-code}\n# Find the most distinguishing features between species\niris_wide <- iris %>%\n  pivot_longer(cols = -Species, names_to = \"Measurement\", values_to = \"Value\") %>%\n  group_by(Measurement, Species) %>%\n  summarise(mean_value = mean(Value), .groups = \"drop\") %>%\n  pivot_wider(names_from = Species, values_from = mean_value) %>%\n  mutate(versicolor_vs_setosa = abs(versicolor - setosa),\n         virginica_vs_setosa = abs(virginica - setosa),\n         virginica_vs_versicolor = abs(virginica - versicolor),\n         max_difference = pmax(versicolor_vs_setosa, virginica_vs_setosa, virginica_vs_versicolor))\n\n# Display the results ordered by maximum difference\niris_wide %>% arrange(desc(max_difference))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 8\n  Measurement  setosa versicolor virginica versicolor_vs_setosa\n  <chr>         <dbl>      <dbl>     <dbl>                <dbl>\n1 Petal.Length  1.46        4.26      5.55                2.80 \n2 Petal.Width   0.246       1.33      2.03                1.08 \n3 Sepal.Length  5.01        5.94      6.59                0.93 \n4 Sepal.Width   3.43        2.77      2.97                0.658\n# ℹ 3 more variables: virginica_vs_setosa <dbl>, virginica_vs_versicolor <dbl>,\n#   max_difference <dbl>\n```\n\n\n:::\n:::\n\n\n\n## Handling Missing Data\n\nMissing data is a common challenge. This practical example demonstrates handling techniques:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a simulated customer dataset with missing values\nset.seed(123) # For reproducibility\n\ncustomers <- data.frame(\n  customer_id = 1:100,\n  age = sample(18:70, 100, replace = TRUE),\n  income = round(rnorm(100, 50000, 15000)),\n  years_as_customer = sample(0:20, 100, replace = TRUE),\n  purchase_frequency = sample(1:10, 100, replace = TRUE)\n)\n\n# Introduce missing values randomly\nset.seed(456)\ncustomers$age[sample(1:100, 10)] <- NA\ncustomers$income[sample(1:100, 15)] <- NA\ncustomers$purchase_frequency[sample(1:100, 5)] <- NA\n\n# 1. Identify missing data\nmissing_summary <- sapply(customers, function(x) sum(is.na(x)))\nmissing_summary\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       customer_id                age             income  years_as_customer \n                 0                 10                 15                  0 \npurchase_frequency \n                 5 \n```\n\n\n:::\n\n```{.r .cell-code}\n# 2. Visualize the pattern of missing data\nlibrary(naniar) # May need to install this package\nvis_miss(customers)\n```\n\n::: {.cell-output-display}\n![](intro-to-r-analytics_files/figure-html/missing-data-analysis-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# 3. Handle missing data with multiple approaches\n\n# Option A: Remove rows with any missing values\nclean_customers <- na.omit(customers)\nnrow(customers) - nrow(clean_customers) # Number of rows removed\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 26\n```\n\n\n:::\n\n```{.r .cell-code}\n# Option B: Impute with mean/median (numeric variables only)\nimputed_customers <- customers %>%\n  mutate(\n    age = ifelse(is.na(age), median(age, na.rm = TRUE), age),\n    income = ifelse(is.na(income), mean(income, na.rm = TRUE), income),\n    purchase_frequency = ifelse(is.na(purchase_frequency), \n                               median(purchase_frequency, na.rm = TRUE), \n                               purchase_frequency)\n  )\n\n# Option C: Predictive imputation (using age to predict income)\nlibrary(mice) # For more sophisticated imputation\n# Quick imputation model - in practice more parameters would be used\nimputed_data <- mice(customers, m = 5, method = \"pmm\", printFlag = FALSE)\ncustomers_complete <- complete(imputed_data)\n\n# Compare results by calculating customer value score\ncalculate_value <- function(df) {\n  df %>%\n    mutate(customer_value = (income/10000) * (purchase_frequency/10) * log(years_as_customer + 1)) %>%\n    arrange(desc(customer_value)) %>%\n    select(customer_id, customer_value, everything())\n}\n\n# Top 5 customers by value (original with NAs removed)\nhead(calculate_value(clean_customers), 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  customer_id customer_value age income years_as_customer purchase_frequency\n1           7       24.63960  67  82249                19                 10\n2          54       15.73965  22  70961                15                  8\n3          59       15.67045  50  70649                15                  8\n4          84       15.09251  21  55732                14                 10\n5          72       14.27848  23  61853                12                  9\n```\n\n\n:::\n\n```{.r .cell-code}\n# Top 5 customers by value (with imputed values)\nhead(calculate_value(customers_complete), 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  customer_id customer_value age income years_as_customer purchase_frequency\n1           7       24.63960  67  82249                19                 10\n2          54       15.73965  22  70961                15                  8\n3          59       15.67045  50  70649                15                  8\n4          84       15.09251  21  55732                14                 10\n5          72       14.27848  23  61853                12                  9\n```\n\n\n:::\n:::\n\n\n\n## Time Series Analysis for Business Trends\n\nTime series analysis is essential for understanding business trends and forecasting:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load packages\nlibrary(forecast)\nlibrary(tseries)\n\n# Examine the built-in AirPassengers dataset (monthly air passengers from 1949 to 1960)\ndata(AirPassengers)\nclass(AirPassengers)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"ts\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# Plot the time series\nautoplots <- autoplot(AirPassengers) +\n  labs(title = \"Monthly Air Passengers (1949-1960)\",\n       y = \"Passenger Count\",\n       x = \"Year\") +\n  theme_minimal()\n\n# Decompose the time series into seasonal components\ndecomposed <- decompose(AirPassengers, \"multiplicative\")\nautoplot(decomposed) +\n  labs(title = \"Decomposition of Air Passengers Time Series\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](intro-to-r-analytics_files/figure-html/time-series-analysis-1.png){width=960}\n:::\n\n```{.r .cell-code}\n# Forecasting future values using auto.arima\nfit <- auto.arima(AirPassengers)\nforecasts <- forecast(fit, h = 24) # Forecast 2 years ahead\n\n# Plot the forecasts\nplot(forecasts, \n     main = \"Air Passengers Forecast (24 months)\",\n     xlab = \"Year\", \n     ylab = \"Passenger Count\")\n```\n\n::: {.cell-output-display}\n![](intro-to-r-analytics_files/figure-html/time-series-analysis-2.png){width=960}\n:::\n\n```{.r .cell-code}\n# Summary of the forecast model\nsummary(fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSeries: AirPassengers \nARIMA(2,1,1)(0,1,0)[12] \n\nCoefficients:\n         ar1     ar2      ma1\n      0.5960  0.2143  -0.9819\ns.e.  0.0888  0.0880   0.0292\n\nsigma^2 = 132.3:  log likelihood = -504.92\nAIC=1017.85   AICc=1018.17   BIC=1029.35\n\nTraining set error measures:\n                 ME     RMSE     MAE      MPE     MAPE     MASE        ACF1\nTraining set 1.3423 10.84619 7.86754 0.420698 2.800458 0.245628 -0.00124847\n```\n\n\n:::\n:::\n",
    "supporting": [
      "intro-to-r-analytics_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}