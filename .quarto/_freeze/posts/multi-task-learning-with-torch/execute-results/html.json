{
  "hash": "05f1e3873f05f02e7c50f629b0927902",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Multi-Task Learning with torch in R\"\ndate: \"2025-05-11\"\ncategories: [R, Deep Learning, torch, Multi-Task Learning]\nimage: \"../images/torch.png\"\nexecute:\n  echo: true\n  warning: false\n  message: false\n  eval: true\n---\n\n\n\nMulti-task learning (MTL) is an approach where a single neural network model is trained to perform multiple related tasks simultaneously. This methodology can improve model generalization, reduce overfitting, and leverage shared information across tasks. This post explores  how to implement a multi-task learning model using the `torch` package in R.\n\n## Introduction\n\nMulti-task learning operates by sharing representations between related tasks, enabling models to generalize more effectively. Instead of training separate models for each task, this approach develops a single model with:\n\n- **Shared layers** that learn common features across tasks\n- **Task-specific layers** that specialize for each individual task  \n- **Multiple loss functions**, one for each task\n\nThis approach is particularly valuable when dealing with related prediction problems that can benefit from shared feature representations.\n\n## Packages\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(c(\"torch\", \"tidyverse\", \"corrplot\"))\nlibrary(torch)\nlibrary(tidyverse)\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n\n## Creating a MTL Model\n\nThe implementation will construct a model that simultaneously performs two related tasks:\n\n1. **Regression**: Predicting a continuous value\n2. **Classification**: Predicting a binary outcome\n\n### Sample Data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set seed for reproducibility\nset.seed(123)\n\n# Number of samples\nn <- 1000\n\n# Create a dataset with 5 features\nx <- torch_randn(n, 5)\n\n# Task 1 (Regression): Predict continuous value\n# Create a target that's a function of the input features plus some noise\ny_regression <- x[, 1] * 0.7 + x[, 2] * 0.3 - x[, 3] * 0.5 + torch_randn(n) * 0.2\n\n# Task 2 (Classification): Predict binary outcome\n# Create a classification target based on a nonlinear combination of features\nlogits <- x[, 1] * 0.8 - x[, 4] * 0.4 + x[, 5] * 0.6\ny_classification <- (logits > 0)$to(torch_float())\n\n# Split into training (70%) and testing (30%) sets\ntrain_idx <- 1:round(0.7 * n)\ntest_idx <- (round(0.7 * n) + 1):n\n\n# Training data\nx_train <- x[train_idx, ]\ny_reg_train <- y_regression[train_idx]\ny_cls_train <- y_classification[train_idx]\n\n# Testing data\nx_test <- x[test_idx, ]\ny_reg_test <- y_regression[test_idx]\ny_cls_test <- y_classification[test_idx]\n```\n:::\n\n\n\n### Define the Multi-Task Neural Network\n\nThe architecture design creates a neural network with shared layers and task-specific branches:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define the multi-task neural network\nmulti_task_net <- nn_module(\n  \"MultiTaskNet\",\n  \n  initialize = function(input_size, \n                        hidden_size, \n                        reg_output_size = 1, \n                        cls_output_size = 1) {\n    \n    self$input_size <- input_size\n    self$hidden_size <- hidden_size\n    self$reg_output_size <- reg_output_size\n    self$cls_output_size <- cls_output_size\n    \n    # Shared layers - these learn representations useful for both tasks\n    self$shared_layer1 <- nn_linear(input_size, hidden_size)\n    self$shared_layer2 <- nn_linear(hidden_size, hidden_size)\n    \n    # Task-specific layers\n    # Regression branch\n    self$regression_layer <- nn_linear(hidden_size, reg_output_size)\n    \n    # Classification branch\n    self$classification_layer <- nn_linear(hidden_size, cls_output_size)\n  },\n  \n  forward = function(x) {\n    # Shared feature extraction\n    shared_features <- x %>%\n      self$shared_layer1() %>%\n      nnf_relu() %>%\n      self$shared_layer2() %>%\n      nnf_relu()\n    \n    # Task-specific predictions\n    regression_output <- self$regression_layer(shared_features)\n    classification_logits <- self$classification_layer(shared_features)\n    \n    list(\n      regression = regression_output,\n      classification = classification_logits\n    )\n  }\n)\n\n# Create model instance\nmodel <- multi_task_net(\n  input_size = 5,\n  hidden_size = 10\n)\n\n# Print model architecture\nprint(model)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAn `nn_module` containing 192 parameters.\n\n── Modules ─────────────────────────────────────────────────────────────────────\n• shared_layer1: <nn_linear> #60 parameters\n• shared_layer2: <nn_linear> #110 parameters\n• regression_layer: <nn_linear> #11 parameters\n• classification_layer: <nn_linear> #11 parameters\n```\n\n\n:::\n:::\n\n\n\n### 4. Define Loss Functions and Optimizer\n\nMulti-task learning requires separate loss functions for each task.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Loss functions\nregression_loss_fn <- nnf_mse_loss  # Mean squared error for regression\nclassification_loss_fn <- nnf_binary_cross_entropy_with_logits  # Binary cross-entropy for classification\n\n# Optimizer with weight decay for L2 regularization\noptimizer <- optim_adam(model$parameters, lr = 0.01)\n\n# Task weights - these control the relative importance of each task\ntask_weights <- c(regression = 0.5, classification = 0.5)\n\n# Validation split from training data\nval_size <- round(0.2 * length(train_idx))\nval_indices <- sample(train_idx, val_size)\ntrain_indices <- setdiff(train_idx, val_indices)\n\n# Create validation sets\nx_val <- x[val_indices, ]\ny_reg_val <- y_regression[val_indices]\ny_cls_val <- y_classification[val_indices]\n\n# Update training sets\nx_train <- x[train_indices, ]\ny_reg_train <- y_regression[train_indices]\ny_cls_train <- y_classification[train_indices]\n```\n:::\n\n\n\n### Training Loop\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Hyperparameters\nepochs <- 100  # Increased epochs since we have early stopping\n\n# Enhanced training history tracking\ntraining_history <- data.frame(\n  epoch = integer(),\n  train_reg_loss = numeric(),\n  train_cls_loss = numeric(),\n  train_total_loss = numeric(),\n  val_reg_loss = numeric(),\n  val_cls_loss = numeric(),\n  val_total_loss = numeric(),\n  val_accuracy = numeric()\n)\n\nfor (epoch in 1:epochs) {\n  # Training phase\n  model$train()\n  optimizer$zero_grad()\n  \n  # Forward pass on training data\n  outputs <- model(x_train)\n  \n  # Calculate training loss for each task\n  train_reg_loss <- regression_loss_fn(\n    outputs$regression$squeeze(), \n    y_reg_train\n  )\n  \n  train_cls_loss <- classification_loss_fn(\n    outputs$classification$squeeze(), \n    y_cls_train\n  )\n  \n  # Weighted combined training loss\n  train_total_loss <- task_weights[\"regression\"] * train_reg_loss + \n    task_weights[\"classification\"] * train_cls_loss\n  \n  # Backward pass and optimize\n  train_total_loss$backward()\n  \n  # Gradient clipping to prevent exploding gradients\n  nn_utils_clip_grad_norm_(model$parameters, max_norm = 1.0)\n  \n  optimizer$step()\n  \n  # Validation phase\n  model$eval()\n  \n  with_no_grad({\n    val_outputs <- model(x_val)\n    \n    # Calculate validation losses\n    val_reg_loss <- regression_loss_fn(\n      val_outputs$regression$squeeze(), \n      y_reg_val\n    )\n    \n    val_cls_loss <- classification_loss_fn(\n      val_outputs$classification$squeeze(), \n      y_cls_val\n    )\n    \n    val_total_loss <- task_weights[\"regression\"] * val_reg_loss + task_weights[\"classification\"] * val_cls_loss\n    \n    # Calculate validation accuracy\n    val_cls_probs <- nnf_sigmoid(val_outputs$classification$squeeze())\n    val_cls_preds <- (val_cls_probs > 0.5)$to(torch_int())\n    val_accuracy <- (val_cls_preds == y_cls_val$to(torch_int()))$sum()$item() / length(val_indices)\n  })\n  \n  # Record history\n  training_history <- rbind(\n    training_history,\n    data.frame(\n      epoch = epoch,\n      train_reg_loss = as.numeric(train_reg_loss$item()),\n      train_cls_loss = as.numeric(train_cls_loss$item()),\n      train_total_loss = as.numeric(train_total_loss$item()),\n      val_reg_loss = as.numeric(val_reg_loss$item()),\n      val_cls_loss = as.numeric(val_cls_loss$item()),\n      val_total_loss = as.numeric(val_total_loss$item()),\n      val_accuracy = val_accuracy\n    )\n  )\n  \n  # Print progress every 25 epochs\n  if (epoch %% 25 == 0 || epoch == 1) {\n    cat(sprintf(\"Epoch %d - Train Loss: %.4f, Val Loss: %.4f, Val Acc: %.3f\\n\", \n                epoch, \n                train_total_loss$item(), \n                val_total_loss$item(), \n                val_accuracy))\n  }\n\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nEpoch 1 - Train Loss: 0.7958, Val Loss: 0.7369, Val Acc: 0.493\nEpoch 25 - Train Loss: 0.3267, Val Loss: 0.3035, Val Acc: 0.821\nEpoch 50 - Train Loss: 0.1548, Val Loss: 0.1350, Val Acc: 0.971\nEpoch 75 - Train Loss: 0.0599, Val Loss: 0.0479, Val Acc: 0.993\nEpoch 100 - Train Loss: 0.0381, Val Loss: 0.0356, Val Acc: 1.000\n```\n\n\n:::\n:::\n\n\n\n### Model Evaluation\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set model to evaluation mode\nmodel$eval()\n\n# Make predictions on test set\nwith_no_grad({\n  outputs <- model(x_test)\n  \n  # Regression evaluation\n  reg_preds <- outputs$regression$squeeze()\n  reg_test_loss <- regression_loss_fn(reg_preds, y_reg_test)\n  \n  # Classification evaluation\n  cls_preds <- outputs$classification$squeeze()\n  cls_probs <- nnf_sigmoid(cls_preds)\n  cls_test_loss <- classification_loss_fn(cls_preds, y_cls_test)\n  \n  # Convert predictions to binary (threshold = 0.5)\n  cls_pred_labels <- (cls_probs > 0.5)$to(torch_int())\n  \n  # Calculate accuracy\n  accuracy <- (cls_pred_labels == y_cls_test$to(torch_int()))$sum()$item() / length(test_idx)\n})\n\n# Calculate additional metrics\nreg_preds_r <- as.numeric(reg_preds)\ny_reg_test_r <- as.numeric(y_reg_test)\ncls_probs_r <- as.numeric(cls_probs)\ny_cls_test_r <- as.numeric(y_cls_test)\n\n# Regression metrics\nrmse <- sqrt(mean((reg_preds_r - y_reg_test_r)^2))\nmae <- mean(abs(reg_preds_r - y_reg_test_r))\nr_squared <- cor(reg_preds_r, y_reg_test_r)^2\n\n# Classification metrics\nauc <- pROC::auc(pROC::roc(y_cls_test_r, cls_probs_r, quiet = TRUE))\n\n# Display results\nperformance_results <- data.frame(\n  Task = c(\"Regression\", \"Regression\", \"Regression\", \"Classification\", \"Classification\", \"Classification\"),\n  Metric = c(\"Test Loss (MSE)\", \"RMSE\", \"R-squared\", \"Test Loss (BCE)\", \"Accuracy\", \"AUC\"),\n  Value = c(\n    round(reg_test_loss$item(), 4),\n    round(rmse, 4),\n    round(r_squared, 4),\n    round(cls_test_loss$item(), 4),\n    round(accuracy * 100, 2), \n    round(auc * 100, 2)\n  )\n)\n\nprint(performance_results)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n            Task          Metric   Value\n1     Regression Test Loss (MSE)  0.0533\n2     Regression            RMSE  0.2308\n3     Regression       R-squared  0.9449\n4 Classification Test Loss (BCE)  0.0492\n5 Classification        Accuracy 98.0000\n6 Classification             AUC 99.9400\n```\n\n\n:::\n:::\n\n\n\n### Visualization and Overfitting Analysis\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot enhanced training history with overfitting detection\np1 <- training_history %>%\n  select(epoch, train_total_loss, val_total_loss) %>%\n  pivot_longer(cols = c(train_total_loss, val_total_loss), \n               names_to = \"split\", values_to = \"loss\") %>%\n  mutate(split = case_when(\n    split == \"train_total_loss\" ~ \"Training\",\n    split == \"val_total_loss\" ~ \"Validation\"\n  )) %>%\n  ggplot(aes(x = epoch, y = loss, color = split)) +\n  geom_line(size = 1) +\n  geom_vline(xintercept = which.min(training_history$val_total_loss), \n             linetype = \"dashed\", color = \"red\", alpha = 0.7) +\n  labs(title = \"Training vs Validation Loss\",\n       subtitle = \"Red line shows optimal stopping point\",\n       x = \"Epoch\", y = \"Total Loss\", color = \"Dataset\") +\n  theme_minimal() +\n  scale_color_brewer(palette = \"Set1\")\n\n# Separate task losses\np2 <- training_history %>%\n  select(epoch, train_reg_loss, val_reg_loss, train_cls_loss, val_cls_loss) %>%\n  pivot_longer(cols = -epoch, names_to = \"metric\", values_to = \"loss\") %>%\n  separate(metric, into = c(\"split\", \"task\", \"loss_type\"), sep = \"_\") %>%\n  mutate(\n    split = ifelse(split == \"train\", \"Training\", \"Validation\"),\n    task = ifelse(task == \"reg\", \"Regression\", \"Classification\"),\n    metric_name = paste(split, task)\n  ) %>%\n  ggplot(aes(x = epoch, y = loss, color = metric_name)) +\n  geom_line(size = 1) +\n  facet_wrap(~task, scales = \"free_y\") +\n  labs(title = \"Task-Specific Loss Curves\",\n       subtitle = \"Monitoring overfitting in individual tasks\",\n       x = \"Epoch\", y = \"Loss\", color = \"Split & Task\") +\n  theme_minimal() +\n  scale_color_brewer(palette = \"Set2\")\n\n# Validation accuracy progression\np3 <- ggplot(training_history, aes(x = epoch, y = val_accuracy)) +\n  geom_line(color = \"#2c3e50\", size = 1) +\n  geom_hline(yintercept = max(training_history$val_accuracy), \n             linetype = \"dashed\", color = \"red\", alpha = 0.7) +\n  labs(title = \"Validation Accuracy Progression\",\n       subtitle = paste(\"Peak accuracy:\", round(max(training_history$val_accuracy), 3)),\n       x = \"Epoch\", y = \"Validation Accuracy\") +\n  theme_minimal()\n\n# Overfitting analysis\ntraining_history$overfitting_gap <- training_history$train_total_loss - training_history$val_total_loss\n\np4 <- ggplot(training_history, aes(x = epoch, y = overfitting_gap)) +\n  geom_line(color = \"#e74c3c\", size = 1) +\n  geom_hline(yintercept = 0, linetype = \"dashed\", alpha = 0.5) +\n  labs(title = \"Overfitting Gap Analysis\",\n       subtitle = \"Difference between training and validation loss\",\n       x = \"Epoch\", y = \"Training Loss - Validation Loss\") +\n  theme_minimal()\n\n# Regression predictions vs actual values\nregression_results <- data.frame(\n  Actual = y_reg_test_r,\n  Predicted = reg_preds_r\n)\n\np5 <- ggplot(regression_results, aes(x = Actual, y = Predicted)) +\n  geom_point(alpha = 0.6, color = \"#2c3e50\") +\n  geom_abline(slope = 1, intercept = 0, color = \"#e74c3c\", linetype = \"dashed\", size = 1) +\n  geom_smooth(method = \"lm\", color = \"#3498db\", se = TRUE) +\n  labs(title = \"Regression Task: Actual vs Predicted Values\",\n       subtitle = paste(\"R² =\", round(r_squared, 3), \", RMSE =\", round(rmse, 3)),\n       x = \"Actual Values\", y = \"Predicted Values\") +\n  theme_minimal()\n\n# Classification probability distribution\ncls_results <- data.frame(\n  Probability = cls_probs_r,\n  Actual_Class = factor(y_cls_test_r, labels = c(\"Class 0\", \"Class 1\"))\n)\n\np6 <- ggplot(cls_results, aes(x = Probability, fill = Actual_Class)) +\n  geom_histogram(alpha = 0.7, bins = 20, position = \"identity\") +\n  geom_vline(xintercept = 0.5, linetype = \"dashed\", color = \"red\") +\n  labs(title = \"Classification Task: Predicted Probabilities\",\n       subtitle = paste(\"Accuracy =\", round(accuracy * 100, 1), \"%\"),\n       x = \"Predicted Probability\", y = \"Count\", fill = \"Actual Class\") +\n  theme_minimal() +\n  scale_fill_brewer(palette = \"Set1\")\n\n# Combine plots\nlibrary(patchwork)\n(p1 | p3) / (p2) / (p4) / (p5 | p6)\n```\n\n::: {.cell-output-display}\n![](multi-task-learning-with-torch_files/figure-html/unnamed-chunk-1-1.png){width=1152}\n:::\n:::\n\n\n\n## Key Takeaways\n\n1. **Architecture Design**: The shared-private paradigm enables models to learn both common and task-specific representations\n2. **Loss Combination**: Properly weighting multiple loss functions proves crucial for balanced learning across tasks\n3. **Evaluation Strategy**: Each task requires appropriate metrics, and overall model success depends on performance across all tasks\n4. **Parameter Efficiency**: Multi-task models can achieve comparable performance with fewer total parameters when properly regularized\n5. **Knowledge Transfer**: Related tasks can benefit from shared feature learning, especially when data is limited",
    "supporting": [
      "multi-task-learning-with-torch_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}