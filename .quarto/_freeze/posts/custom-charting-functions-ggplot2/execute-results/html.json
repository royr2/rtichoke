{
  "hash": "c39f806cab1d7e738ebb2c360b964b00",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Developing Custom Charting Functions with ggplot2\"\ndate: \"2024-05-14\"\ncategories: [R, Data Visualization, ggplot2]\nimage: \"../images/custom_charts.png\"\nexecute:\n  echo: true\n  warning: false\n  message: false\n  eval: true\n---\n\n\n\n## Introduction\n\nWhile R provides numerous options for two-dimensional graphics and data visualization, `ggplot2` offers great functionality, features, and visual quality. This tutorial shows how to develop customized charting functions for specific visualization types, utilizing `ggplot2` as the foundational visualization engine. The approach enables the creation of reusable, standardized visualization components suitable for production environments and analytical workflows.\n\n## Package Dependencies\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load required packages\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(scales)\nlibrary(stringr)\n```\n:::\n\n\n\n## Dataset Acquisition and Preparation\n\nThis tutorial utilizes a summarized version of the COVID-19 Data Repository maintained by [Johns Hopkins University](https://github.com/CSSEGISandData/COVID-19) to demonstrate custom charting function development.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load COVID-19 data\ndf <- read.csv(\"https://bit.ly/3G8G63u\")\n\n# Get top 5 countries by death count\ntop_countries <- df %>% \n  group_by(country) %>% \n  summarise(count = sum(deaths_daily)) %>% \n  top_n(5) %>% \n  .$country\n\nprint(top_countries)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Brazil\" \"India\"  \"Mexico\" \"Russia\" \"US\"    \n```\n\n\n:::\n:::\n\n\n\nSubsequently, we prepare the dataset for visualization by calculating a 7-day centered moving average of daily confirmed cases for the identified top five countries:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a data frame with the required information\n# Note that a centered 7-day moving average is used\nplotdf <- df %>% \n  mutate(date = as.Date(date, format = \"%m/%d/%Y\")) %>% \n  filter(country %in% top_countries) %>% \n  group_by(country, date) %>% \n  summarise(count = sum(confirmed_daily)) %>%\n  arrange(country, date) %>% \n  group_by(country) %>% \n  mutate(MA = zoo::rollapply(count, FUN = mean, width = 7, by = 1, fill = NA, align = \"center\"))\n```\n:::\n\n\n\n## Fundamental Line Chart Function Development\n\nThe initial implementation demonstrates the creation of a basic line chart function. Note the utilization of `aes_string()` instead of `aes()`, which enables the provision of arguments to `ggplot2` as string parameters, thereby enhancing function flexibility and programmability.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Function definition\nline_chart <- function(df, \n                       x, \n                       y, \n                       group_color = NULL, \n                       line_width = 1, \n                       line_type = 1){\n  \n  ggplot(df, aes(x = !! sym(x), \n                 y = !! sym(y), \n                 color = !! sym(group_color))) + \n    geom_line(linewidth = line_width, \n              linetype = line_type)\n}\n\n# Test run\nline_chart(plotdf,\n           x = \"date\",\n           y = \"MA\",\n           group_color = \"country\", \n           line_type = 1, \n           line_width = 1.2)\n```\n\n::: {.cell-output-display}\n![](custom-charting-functions-ggplot2_files/figure-html/line-chart-basic-1.png){width=672}\n:::\n:::\n\n\n\n## Custom Theme Development\n\nHaving established the methodology for encapsulating `ggplot2` calls within intuitive function wrappers, we proceed to develop a customized theme framework for our visualizations. This approach ensures consistent styling across all chart types and can be universally applied to any `ggplot2` object.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncustom_theme <- function(plt, \n                         base_size = 11, \n                         base_line_size = 1, \n                         palette = \"Set1\"){\n  \n  # Note the use of \"+\" and not \"%>%\"\n  plt + \n    # Adjust overall font size\n    theme_minimal(base_size = base_size, \n                  base_line_size = base_line_size) + \n    \n    # Put legend at the bottom\n    theme(legend.position = \"bottom\") + \n    \n    # Different colour scale\n    scale_color_brewer(palette = palette)\n}\n\n# Test run\nline_chart(plotdf, \"date\", \"MA\", \"country\") %>% custom_theme()\n```\n\n::: {.cell-output-display}\n![](custom-charting-functions-ggplot2_files/figure-html/custom-theme-basic-1.png){width=672}\n:::\n:::\n\n\n\n## Advanced Function Enhancement\n\nThe following section demonstrates the expansion of the `line_chart()` function to incorporate additional features and parameters, thereby increasing its versatility and applicability across diverse visualization requirements:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nline_chart <- function(df, \n                       x, y, \n                       group_color = NULL, \n                       line_width = 1, \n                       line_type = 1, \n                       xlab = NULL, \n                       ylab = NULL, \n                       title = NULL, \n                       subtitle = NULL, \n                       caption = NULL){\n  # Base plot\n  ggplot(df, aes(x = !! sym(x), \n                 y = !! sym(y), \n                 color = !! sym(group_color))) + \n    \n    # Line chart \n    geom_line(size = line_width, \n              linetype = line_type) + \n    \n    # Titles and subtitles\n    labs(x = xlab, \n         y = ylab, \n         title = title, \n         subtitle = subtitle, \n         caption = caption)\n}\n```\n:::\n\n\n\nCorrespondingly, we enhance the `custom_theme()` function to accommodate diverse axis formatting options and advanced styling parameters:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncustom_theme <- function(plt, \n                         palette = \"Set1\", \n                         format_x_axis_as = NULL, \n                         format_y_axis_as = NULL, \n                         x_axis_scale = 1, \n                         y_axis_scale = 1, \n                         x_axis_text_size = 10, \n                         y_axis_text_size = 10, \n                         base_size = 11, \n                         base_line_size = 1, \n                         x_angle = 45){\n  \n  mappings <- names(unlist(plt$mapping))\n  \n  p <- plt + \n    \n    # Adjust overall font size\n    theme_minimal(base_size = base_size, \n                  base_line_size = base_line_size) + \n    \n    # Put legend at the bottom\n    theme(legend.position = \"bottom\", \n          axis.text.x = element_text(angle = x_angle)) + \n    \n    # Different colour palette\n    {if(\"colour\" %in% mappings) scale_color_brewer(palette = palette)}+\n    \n    {if(\"fill\" %in% mappings) scale_fill_brewer(palette = palette)}+\n    \n    # Change some theme options\n    theme(plot.background = element_rect(fill = \"#f7f7f7\"), \n          plot.subtitle = element_text(face = \"italic\"), \n          axis.title.x = element_text(face = \"bold\", \n                                      size = x_axis_text_size), \n          axis.title.y = element_text(face = \"bold\", \n                                      size = y_axis_text_size)) + \n    \n    # Change x-axis formatting\n    {if(!is.null(format_x_axis_as))\n      switch(format_x_axis_as, \n             \"date\" = scale_x_date(breaks = pretty_breaks(n = 12)), \n             \"number\" = scale_x_continuous(labels = number_format(accuracy = 0.1, \n                                                                  decimal.mark = \",\", \n                                                                  scale = x_axis_scale)), \n             \"percent\" = scale_x_continuous(labels = percent))} + \n    \n    # Change y-axis formatting\n    {if(!is.null(format_y_axis_as))\n      \n      switch(format_y_axis_as, \n             \"date\" = scale_y_date(breaks = pretty_breaks(n = 12)), \n             \"number\" = scale_y_continuous(labels = number_format(accuracy = 0.1, \n                                                                  decimal.mark = \",\", \n                                                                  scale = y_axis_scale)), \n             \"percent\" = scale_y_continuous(labels = percent))}\n  \n  # Capitalise all names\n  vec <- lapply(p$labels, str_to_title)\n  names(vec) <- names(p$labels)\n  p$labels <- vec\n  \n  return(p)\n}\n```\n:::\n\n\n\n## Integrated Function Implementation\n\nThe following demonstration illustrates the coordinated application of our enhanced functions to generate a polished, publication-ready visualization:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nline_chart(plotdf,\n           x = \"date\", \n           y = \"MA\", \n           group_color = \"country\", \n           xlab = \"Date\", \n           ylab = \"Moving Avg. (in '000)\", \n           title = \"Daily COVID19 Case Load\", \n           subtitle = \"Top 5 countries by volume\") %>% \n  \n  custom_theme(format_x_axis_as = \"date\", \n               format_y_axis_as = \"number\", \n               y_axis_scale = 0.001)\n```\n\n::: {.cell-output-display}\n![](custom-charting-functions-ggplot2_files/figure-html/final-line-chart-1.png){width=672}\n:::\n:::\n\n\n\n## Cross-Chart Type Theme Application\n\nThe architectural design of our `custom_theme()` function enables its universal application to any `ggplot2` object, regardless of visualization type. The following example demonstrates this flexibility through bar chart implementation:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- plotdf %>%  \n  mutate(month = format(date, \"%m-%b\")) %>% \n  ggplot(aes(x = month, y = MA, fill = country)) + \n  geom_col(position = \"dodge\") + \n  labs(title = \"Monthly COVID19 Case load trend\", \n       subtitle = \"Top 5 countries\", \n       x = \"Month\", \n       y = \"Moving Average ('000)\")\n\ncustom_theme(p, \n             palette = \"Set2\", \n             format_y_axis_as = \"number\", \n             y_axis_scale = 0.001)\n```\n\n::: {.cell-output-display}\n![](custom-charting-functions-ggplot2_files/figure-html/bar-chart-1.png){width=672}\n:::\n:::\n\n\n\n## Strategic Advantages of Custom Charting Functions\n\nThe development of custom charting functions utilizing ggplot2 provides substantial advantages for analytical workflows:\n\n1. **Visual Consistency**: Ensures uniform appearance and styling across all visualizations within reports or analytical dashboards.\n\n2. **Development Efficiency**: Significantly reduces code volume required for frequently utilized chart types and configurations.\n\n3. **Maintenance Optimization**: Facilitates centralized style updates through single function modifications, propagating changes across all implementations.\n\n4. **Accessibility Enhancement**: Abstracts ggplot2 complexity for team members with varying levels of package familiarity, democratizing visualization capabilities.\n\n## Implementation Strategy: Custom Functions vs. Direct ggplot2\n\nThe development of customized charting functions utilizing `ggplot2` demonstrates optimal value when creating repetitive visualization types within structured analytical workflows. For exploratory data analysis activities, direct `ggplot2` implementation often provides superior flexibility, enabling rapid prototyping and layered chart construction within integrated analytical pipelines.",
    "supporting": [
      "custom-charting-functions-ggplot2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}