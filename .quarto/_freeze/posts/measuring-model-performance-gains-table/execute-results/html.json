{
  "hash": "f98b6b7a5323a5263a74281ee44d512f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Evaluating Binary Classification Models Using Gains Tables\"\ndate: \"2024-01-28\"\ncategories: [R, Credit Risk Analytics, Model Evaluation]\nimage: \"../images/gains.png\"\nexecute:\n  echo: true\n  warning: false\n  message: false\n  eval: true\n---\n\n\n\n## Introduction\n\nIn credit risk modeling and binary classification applications, analysts employ gains tables (also known as KS tables) as a fundamental tool for measuring and quantifying model performance. This tutorial dives into the construction and interpretion of gains tables using R.\n## Theoretical Foundation: Understanding Gains Tables\n\nA gains table systematically discretizes the population (typically a validation or test dataset) into groups based on the model's output predictions (probability scores, log odds, or risk scores). Each group conventionally represents 10% of the total population (deciles), though alternative binning strategies may be employed. The output presents summary statistics for each group and analyzes the cumulative distributions of events (defaults) and non-events to quantify the model's discriminatory performance.\n\n## Package Dependencies\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load required packages\nlibrary(dplyr)\nlibrary(magrittr)\nlibrary(knitr)\nlibrary(scales)\n```\n:::\n\n\n\n## Dataset Preparation\n\nThis tutorial utilizes a sample from the Lending Club dataset, which contains comprehensive loan information and associated outcomes suitable for credit risk modeling applications.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the sample data\nsample <- read.csv(\"https://bit.ly/42ypcnJ\")\n\n# Check dimensions\ndim(sample)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10000   153\n```\n\n\n:::\n:::\n\n\n\n## Target Definition\n\nThe initial step requires the creation of a binary target variable for modeling purposes. In this credit risk application, we identify borrowers who defaulted on their loan obligations.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check unique loan statuses\nunique(sample$loan_status)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Fully Paid\"                                         \n[2] \"Current\"                                            \n[3] \"Charged Off\"                                        \n[4] \"Late (31-120 days)\"                                 \n[5] \"Late (16-30 days)\"                                  \n[6] \"In Grace Period\"                                    \n[7] \"Does not meet the credit policy. Status:Fully Paid\" \n[8] \"Does not meet the credit policy. Status:Charged Off\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# Define \"bad\" loans as those that are charged off\ncodes <- c(\"Charged Off\", \"Does not meet the credit policy. Status:Charged Off\")\n\n# Create a binary flag for defaults\nsample %<>% mutate(bad_flag = ifelse(loan_status %in% codes, 1, 0))\n\n# Check overall event rates\nsample %>% \n  summarise(events = sum(bad_flag == 1), \n            non_events = sum(bad_flag == 0)) %>% \n  mutate(            event_rate = events/(events + non_events))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  events non_events event_rate\n1   1162       8838     0.1162\n```\n\n\n:::\n:::\n\n\n\n## Model Development\n\nSubsequently, we develop a logistic regression model to generate predictions that will serve as the foundation for gains table construction.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Replace NA values with a default value\nsample[is.na(sample)] <- -1\n\n# Clean the data\nsample %<>% \n  # Remove cases where home ownership and payment plan are not reported\n  filter(!home_ownership %in% c(\"\", \"NONE\"),\n         pymnt_plan != \"\") %>% \n  # Convert categorical variables to factors\n  mutate(home_ownership = factor(home_ownership), \n         pymnt_plan = factor(pymnt_plan))\n\n# Train-test split (70-30)\nidx <- sample(1:nrow(sample), size = 0.7 * nrow(sample), replace = FALSE)\ntrain <- sample[idx,]\ntest <- sample[-idx,]\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Build a logistic regression model\nmdl <- glm(\n  formula = bad_flag ~ \n    loan_amnt + term + mths_since_last_delinq + total_pymnt + \n    home_ownership + acc_now_delinq + \n    inq_last_6mths + delinq_amnt + \n    mths_since_last_record + mths_since_recent_revol_delinq + \n    mths_since_last_major_derog + mths_since_recent_inq + \n    mths_since_recent_bc + num_accts_ever_120_pd,\n  family = \"binomial\", \n  data = train\n)\n\n# Generate predictions on the test set\ntest$pred <- predict(mdl, newdata = test)\n```\n:::\n\n\n\n## Gains Table Construction\n\nThe following section demonstrates the step-by-step construction of a comprehensive gains table through systematic binning and statistical analysis.\n\n### Population Discretization into Bins\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create deciles based on model predictions\nq <- quantile(test$pred, probs = seq(0, 1, length.out = 11))\n\n# Add bins to test dataset\ntest$bins <- cut(test$pred, breaks = q, include.lowest = TRUE, \n                right = TRUE, ordered_result = TRUE)\n\n# Check the bin levels (note they're in increasing order)\nlevels(test$bins)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"[-5.33,-3.3]\"  \"(-3.3,-2.9]\"   \"(-2.9,-2.66]\"  \"(-2.66,-2.47]\"\n [5] \"(-2.47,-2.28]\" \"(-2.28,-2.1]\"  \"(-2.1,-1.91]\"  \"(-1.91,-1.65]\"\n [9] \"(-1.65,-1.24]\" \"(-1.24,2.03]\" \n```\n\n\n:::\n:::\n\n\n\n### Basic Statistical Measures by Segment\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create initial gains table with counts\ngains_table <- test %>% \n  group_by(bins) %>% \n  summarise(total = n(), \n            events = sum(bad_flag == 1), \n            non_events = sum(bad_flag == 0))\n\n# Add event rate column\ngains_table %<>%\n  mutate(event_rate = percent(events / total, 0.1, 100))\n\n# Display the table\nkable(gains_table)\n```\n\n::: {.cell-output-display}\n\n\n|bins          | total| events| non_events|event_rate |\n|:-------------|-----:|------:|----------:|:----------|\n|[-5.33,-3.3]  |   300|      2|        298|0.7%       |\n|(-3.3,-2.9]   |   300|      9|        291|3.0%       |\n|(-2.9,-2.66]  |   300|     10|        290|3.3%       |\n|(-2.66,-2.47] |   300|     20|        280|6.7%       |\n|(-2.47,-2.28] |   300|     37|        263|12.3%      |\n|(-2.28,-2.1]  |   300|     42|        258|14.0%      |\n|(-2.1,-1.91]  |   300|     48|        252|16.0%      |\n|(-1.91,-1.65] |   300|     53|        247|17.7%      |\n|(-1.65,-1.24] |   300|     79|        221|26.3%      |\n|(-1.24,2.03]  |   300|     80|        220|26.7%      |\n\n\n:::\n:::\n\n\n\n### Cumulative Distribution\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Add population percentage and cumulative distributions\ngains_table %<>%\n  mutate(pop_pct = percent(total/sum(total), 0.1, 100), \n         \n         # Calculate cumulative percentages\n         c.events_pct = cumsum(events) / sum(events),\n         c.non_events_pct = cumsum(non_events) / sum(non_events))\n\n# Display the updated table\nkable(gains_table)\n```\n\n::: {.cell-output-display}\n\n\n|bins          | total| events| non_events|event_rate |pop_pct | c.events_pct| c.non_events_pct|\n|:-------------|-----:|------:|----------:|:----------|:-------|------------:|----------------:|\n|[-5.33,-3.3]  |   300|      2|        298|0.7%       |10.0%   |    0.0052632|        0.1137405|\n|(-3.3,-2.9]   |   300|      9|        291|3.0%       |10.0%   |    0.0289474|        0.2248092|\n|(-2.9,-2.66]  |   300|     10|        290|3.3%       |10.0%   |    0.0552632|        0.3354962|\n|(-2.66,-2.47] |   300|     20|        280|6.7%       |10.0%   |    0.1078947|        0.4423664|\n|(-2.47,-2.28] |   300|     37|        263|12.3%      |10.0%   |    0.2052632|        0.5427481|\n|(-2.28,-2.1]  |   300|     42|        258|14.0%      |10.0%   |    0.3157895|        0.6412214|\n|(-2.1,-1.91]  |   300|     48|        252|16.0%      |10.0%   |    0.4421053|        0.7374046|\n|(-1.91,-1.65] |   300|     53|        247|17.7%      |10.0%   |    0.5815789|        0.8316794|\n|(-1.65,-1.24] |   300|     79|        221|26.3%      |10.0%   |    0.7894737|        0.9160305|\n|(-1.24,2.03]  |   300|     80|        220|26.7%      |10.0%   |    1.0000000|        1.0000000|\n\n\n:::\n:::\n\n\n\n### Performance Metrics\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Add KS statistic, capture rate, and cumulative event rate\ngains_table %<>%\n  mutate(\n    # KS statistic (difference between cumulative distributions)\n    ks = round(abs(c.events_pct - c.non_events_pct), 2), \n    \n    # Capture rate (percentage of total events captured)\n    cap_rate = percent(cumsum(events)/sum(events), 1, 100), \n    \n    # Cumulative event rate\n    c_event_rate = percent(cumsum(events)/cumsum(total), 0.1, 100), \n    \n    # Format percentage columns\n    c.events_pct = percent(c.events_pct, 0.1, 100),\n    c.non_events_pct = percent(c.non_events_pct, 0.1, 100))\n\n# Display the final table\nkable(gains_table)\n```\n\n::: {.cell-output-display}\n\n\n|bins          | total| events| non_events|event_rate |pop_pct |c.events_pct |c.non_events_pct |   ks|cap_rate |c_event_rate |\n|:-------------|-----:|------:|----------:|:----------|:-------|:------------|:----------------|----:|:--------|:------------|\n|[-5.33,-3.3]  |   300|      2|        298|0.7%       |10.0%   |0.5%         |11.4%            | 0.11|1%       |0.7%         |\n|(-3.3,-2.9]   |   300|      9|        291|3.0%       |10.0%   |2.9%         |22.5%            | 0.20|3%       |1.8%         |\n|(-2.9,-2.66]  |   300|     10|        290|3.3%       |10.0%   |5.5%         |33.5%            | 0.28|6%       |2.3%         |\n|(-2.66,-2.47] |   300|     20|        280|6.7%       |10.0%   |10.8%        |44.2%            | 0.33|11%      |3.4%         |\n|(-2.47,-2.28] |   300|     37|        263|12.3%      |10.0%   |20.5%        |54.3%            | 0.34|21%      |5.2%         |\n|(-2.28,-2.1]  |   300|     42|        258|14.0%      |10.0%   |31.6%        |64.1%            | 0.33|32%      |6.7%         |\n|(-2.1,-1.91]  |   300|     48|        252|16.0%      |10.0%   |44.2%        |73.7%            | 0.30|44%      |8.0%         |\n|(-1.91,-1.65] |   300|     53|        247|17.7%      |10.0%   |58.2%        |83.2%            | 0.25|58%      |9.2%         |\n|(-1.65,-1.24] |   300|     79|        221|26.3%      |10.0%   |78.9%        |91.6%            | 0.13|79%      |11.1%        |\n|(-1.24,2.03]  |   300|     80|        220|26.7%      |10.0%   |100.0%       |100.0%           | 0.00|100%     |12.7%        |\n\n\n:::\n:::\n\n\n\n## Reusable Function\n\nThe following implementation encapsulates the gains table construction process within a comprehensive, reusable function suitable for any binary classification model evaluation:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngains_table <- function(act, pred, increasing = TRUE, nBins = 10) {\n  \n  # Create bins based on predictions\n  q <- quantile(pred, probs = seq(0, 1, length.out = nBins + 1))\n  bins <- cut(pred, breaks = q, include.lowest = TRUE, right = TRUE, ordered_result = TRUE)\n  \n  df <- data.frame(act, pred, bins)\n  \n  df %>% \n    # Group by bins and calculate statistics\n    group_by(bins) %>% \n    summarise(total = n(), \n              events = sum(act == 1), \n              non_events = sum(act == 0)) %>% \n    mutate(event_rate = percent(events / total, 0.1, 100)) %>% \n    \n    # Sort the table based on the 'increasing' parameter\n    {if(increasing == TRUE) {\n      arrange(., bins)\n    } else {\n      arrange(., desc(bins))\n    }} %>% \n    \n    # Add all performance metrics\n    mutate(pop_pct = percent(total/sum(total), 0.1, 100), \n           c.events_pct = cumsum(events) / sum(events),\n           c.non_events_pct = cumsum(non_events) / sum(non_events), \n           ks = round(abs(c.events_pct - c.non_events_pct), 2), \n           cap_rate = percent(cumsum(events)/sum(events), 1, 100), \n           c_event_rate = percent(cumsum(events)/cumsum(total), 0.1, 100), \n           c.events_pct = percent(c.events_pct, 0.1, 100),\n           c.non_events_pct = percent(c.non_events_pct, 0.1, 100))\n}\n```\n:::\n\n\n\n### Function Implementation\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Generate a gains table with bins in descending order\ntab <- gains_table(test$bad_flag, test$pred, FALSE, 10)\nkable(tab)\n```\n\n::: {.cell-output-display}\n\n\n|bins          | total| events| non_events|event_rate |pop_pct |c.events_pct |c.non_events_pct |   ks|cap_rate |c_event_rate |\n|:-------------|-----:|------:|----------:|:----------|:-------|:------------|:----------------|----:|:--------|:------------|\n|(-1.24,2.03]  |   300|     80|        220|26.7%      |10.0%   |21.1%        |8.4%             | 0.13|21%      |26.7%        |\n|(-1.65,-1.24] |   300|     79|        221|26.3%      |10.0%   |41.8%        |16.8%            | 0.25|42%      |26.5%        |\n|(-1.91,-1.65] |   300|     53|        247|17.7%      |10.0%   |55.8%        |26.3%            | 0.30|56%      |23.6%        |\n|(-2.1,-1.91]  |   300|     48|        252|16.0%      |10.0%   |68.4%        |35.9%            | 0.33|68%      |21.7%        |\n|(-2.28,-2.1]  |   300|     42|        258|14.0%      |10.0%   |79.5%        |45.7%            | 0.34|79%      |20.1%        |\n|(-2.47,-2.28] |   300|     37|        263|12.3%      |10.0%   |89.2%        |55.8%            | 0.33|89%      |18.8%        |\n|(-2.66,-2.47] |   300|     20|        280|6.7%       |10.0%   |94.5%        |66.5%            | 0.28|94%      |17.1%        |\n|(-2.9,-2.66]  |   300|     10|        290|3.3%       |10.0%   |97.1%        |77.5%            | 0.20|97%      |15.4%        |\n|(-3.3,-2.9]   |   300|      9|        291|3.0%       |10.0%   |99.5%        |88.6%            | 0.11|99%      |14.0%        |\n|[-5.33,-3.3]  |   300|      2|        298|0.7%       |10.0%   |100.0%       |100.0%           | 0.00|100%     |12.7%        |\n\n\n:::\n:::\n\n\n\n## Interpretation\n\nA properly constructed gains table provides multiple critical insights into model performance characteristics:\n\n1. **Monotonicity Assessment**: Event rates should demonstrate consistent increases (or decreases) across bins, confirming the model's effectiveness in rank-ordering risk levels.\n\n2. **Population Distribution**: Consistent bin sizes (ideally ~10% each) indicate appropriate score distribution. Inconsistent sizes suggest score clustering, which may complicate threshold determination.\n\n3. **Kolmogorov-Smirnov (KS) Statistic**: The maximum KS value represents the model's discriminatory power. Higher values (approaching 1.0) indicate superior separation between positive and negative cases.\n\n4. **Capture Rate**: Demonstrates the percentage of total events captured at each threshold, essential for operational decision-making.\n\n5. **Cumulative Event Rate**: Indicates the event rate among all cases up to each bin, facilitating approval threshold establishment.\n\n## Applications in Credit Risk Analytics\n\nGains tables serve multiple critical functions in credit risk management environments:\n\n1. **Threshold Optimization**: Identification of appropriate score thresholds for automated approval or rejection decisions.\n\n2. **Tiered Strategy Development**: Construction of multi-tier decision strategies (approve, manual review, decline) based on quantified risk levels.\n\n3. **Model Performance Monitoring**: Longitudinal tracking of model performance through comparison of actual versus expected distributions.\n\n4. **Comparative Model Evaluation**: Systematic comparison of alternative models through KS statistics and capture rate analysis.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}