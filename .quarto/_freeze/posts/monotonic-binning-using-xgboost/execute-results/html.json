{
  "hash": "2ad45ee0292b47524a35b6ad0eae8d9f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Monotonic Binning Using XGBoost\"\ndate: \"2023-01-19\"\ncategories: [R, Credit Risk Analytics, XGBoost]\nimage: \"../images/monotonic.png\"\nexecute:\n  echo: true\n  warning: false\n  message: false\n  eval: true\n---\n\n\n\nThis post focuses on how to implement monotonic binning, a method that groups variable values into bins where event rates demonstrate consistent monotonic behavior. This methodology is essential in credit risk modeling, providing significant advantages in two critical areas:\n\n1. **Enhanced Model Stability**: Monotonic relationships strengthen model robustness by reducing overfitting and ensuring reliable performance in production environments\n2. **Improved Interpretability**: Monotonic constraints facilitate clear explanations by maintaining logical, consistent relationships between predictors and outcomes\n\n## Prerequisites and Required Libraries\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(recipes)  # For data preprocessing\nlibrary(dplyr)    # For data manipulation\nlibrary(xgboost)  # For creating monotonic bins\nlibrary(ggplot2)  # For visualization\n```\n:::\n\n\n\n## Dataset Overview and Loading\n\nThis tutorial demonstrates the methodology using a sample from the Lending Club dataset, which provides comprehensive loan information including default indicators. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load sample data from Lending Club dataset\nsample <- read.csv(\"https://bit.ly/42ypcnJ\")\n\n# Check dimensions of the dataset\ndim(sample)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10000   153\n```\n\n\n:::\n:::\n\n\n\n## Creating a Binary Target Variable\n\nThe first step involves constructing a binary target variable that clearly identifies loan defaults. This variable will serve as our outcome throughout the binning process:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define loan statuses that represent defaults\ncodes <- c(\"Charged Off\", \"Does not meet the credit policy. Status:Charged Off\")\n\n# Create binary target variable\nmodel_data <- sample %>%\n  mutate(bad_flag = ifelse(loan_status %in% codes, 1, 0))\n```\n:::\n\n\n\n## Data Preprocessing\n\nBefore proceeding, the dataset must be prepared through systematic preprocessing. This step ensures data quality and compatibility with the XGBoost implementation. The process utilizes the `recipes` package to:\n\n1. Filter and retain only numeric variables for analysis\n2. Apply median imputation to handle missing values appropriately\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a recipe for preprocessing\nrec <- recipe(bad_flag ~ ., data = model_data) %>%\n  step_select(where(is.numeric)) %>%  # Keep only numeric variables\n  step_impute_median(all_predictors())  # Fill missing values with medians\n\n# Apply the preprocessing steps\nrec <- prep(rec, training = model_data)\ntrain <- bake(rec, new_data = model_data)\n```\n:::\n\n\n\n## Step 3: Exploratory Analysis of Variable Relationships\n\nIt is crucial to examine the raw relationship between predictor variables and the target outcome. This analysis provides insights into  underlying data patterns and validates the need for monotonic transformation. \n\nThis example analyzes the relationship between credit inquiries in the past 6 months and default rates:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create dataframe with inquiries and default flag\ndata.frame(x = model_data$inq_last_6mths,\n           y = model_data$bad_flag) %>%\n  filter(x <= 5) %>%  # Focus on 0-5 inquiries for clarity\n  group_by(x) %>% \n  summarise(count = n(),  # Count observations in each group\n            events = sum(y)) %>%  # Count defaults in each group\n  mutate(pct = events/count) %>%  # Calculate default rate\n  ggplot(aes(x = factor(x), y = pct)) + \n  geom_col() + \n  theme_minimal() + \n  labs(x = \"# of inquiries in past 6 months\", \n       y = \"Default rate\",\n       title = \"Default rate vs number of inquiries\")\n```\n\n::: {.cell-output-display}\n![](monotonic-binning-using-xgboost_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\nWhile the data exhibits a general upward trend (indicating that increased inquiries correlate with higher default rates), the relationship lacks perfect monotonicity. This validates the necessity of the monotonic binning approach to establish consistent patterns.\n\n## Implementing Monotonic Binning with XGBoost\n\nThe implementation uses XGBoost's monotonicity constraints which enforces the model to generate splits that preserve a monotonic relationship with the target variable:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Train XGBoost model with monotonicity constraint\nmdl <- xgboost(\n  data = train %>%\n    select(inq_last_6mths) %>%  # Use only the inquiries variable\n    as.matrix(),  \n  label = train[[\"bad_flag\"]],  # Target variable\n  nrounds = 5,  # Number of boosting rounds\n  params = list(\n    booster = \"gbtree\",\n    objective = \"binary:logistic\",\n    monotone_constraints = 1,  # Force positive relationship\n    max_depth = 1  # Simple trees with single splits\n  ),\n  verbose = 0  # Suppress output\n)\n```\n:::\n\n\n\n## Extracting Split Points and Constructing Final Bins\n\nFollowing model training, the process extracts the optimal split points identified by XGBoost and utilizes them to construct the final  bin structure:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Extract split points from the model\nsplits <- xgb.model.dt.tree(model = mdl)  \n\n# Create bin boundaries including -Inf and Inf for complete coverage\ncuts <- c(-Inf, unique(sort(splits$Split)), Inf)\n\n# Create and visualize the monotonic bins\ndata.frame(target = train$bad_flag,\n           buckets = cut(train$inq_last_6mths, \n                         breaks = cuts, \n                         include.lowest = TRUE, \n                         right = TRUE)) %>% \n  group_by(buckets) %>%\n  summarise(total = n(),  # Count observations in each bin\n            events = sum(target == 1)) %>%  # Count defaults in each bin\n  mutate(pct = events/total) %>%  # Calculate default rate\n  ggplot(aes(x = buckets, y = pct)) + \n  geom_col() + \n  theme_minimal() + \n  labs(x = \"Bins\", \n       y = \"Default rate\",\n       title = \"Monotonic Bins for Inquiries\")\n```\n\n::: {.cell-output-display}\n![](monotonic-binning-using-xgboost_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\nThe default rates now demonstrate perfect monotonic behavior across all bins, creating a clearer and more interpretable relationship compared to the raw data.\n\n## Generalised Function\n\nTo enable implementation across multiple variables, a reusable function that encapsulates the entire monotonic binning workflow would be very useful here. **Note** the use of ranked correlation to identify the appropriate direction to be used inside the Xgboost call.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncreate_bins <- function(var, outcome, max_depth = 10, plot = TRUE){\n  # Determine relationship direction automatically\n  corr <- cor(var, outcome, method = \"spearman\")\n  direction <- ifelse(corr > 0, 1, -1)  # 1 for positive, -1 for negative correlation\n  \n  # Build XGBoost model with appropriate monotonicity constraint\n  mdl <- xgboost(\n    verbose = 0,\n    data = as.matrix(var),\n    label = outcome,\n    nrounds = 100,  # Single round is sufficient for binning\n    params = list(objective = \"binary:logistic\",\n                  monotone_constraints = direction,  # Apply constraint based on correlation\n                  max_depth = max_depth))  # Control tree complexity\n  \n  # Extract and return split points\n  splits <- xgb.model.dt.tree(model = mdl)\n  cuts <- c(-Inf, sort(unique(splits$Split)), Inf)  # Include boundaries for complete coverage\n  \n  # Optionally visualize the bins\n  if(plot) {\n    data.frame(target = outcome,\n               buckets = cut(var, \n                            breaks = cuts, \n                            include.lowest = TRUE, \n                            right = TRUE)) %>% \n      group_by(buckets) %>%\n      summarise(total = n(),\n                events = sum(target == 1)) %>%\n      mutate(pct = events/total) %>%\n      ggplot(aes(x = buckets, y = pct)) + \n      geom_col() + \n      theme_minimal() + \n      labs(x = \"Bins\", \n           y = \"Default rate\",\n           title = \"Monotonic Bins\")\n  }\n  \n  return(cuts)  # Return the bin boundaries\n}\n\n# Example: Create monotonic bins for annual income\nincome_bins <- create_bins(\n  var = train$annual_inc,\n  outcome = train$bad_flag,\n  max_depth = 5\n)\n```\n:::\n",
    "supporting": [
      "monotonic-binning-using-xgboost_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}