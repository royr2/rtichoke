{"title":"Generating Correlated Random Numbers in R Using Matrix Methods","markdown":{"yaml":{"title":"Generating Correlated Random Numbers in R Using Matrix Methods","date":"2024-03-19","categories":["R","Statistics","Simulation"],"image":"../images/correlated.png","execute":{"echo":true,"warning":false,"message":false,"eval":true}},"headingText":"Introduction","containsRefs":false,"markdown":"\n\n\nThe generation of random data with specified correlation patterns can be useful in statistical simulation and this tutorial provides a  methodology for creating correlated random numbers in R. The techniques presented enable the development of realistic synthetic datasets with precisely controlled correlation structures, essential for robust statistical analysis and model validation.\n\n## The Cholesky Decomposition Method\n\n```{r}\n#| label: setup\n\n# Load required packages\nlibrary(ggplot2)\nlibrary(dplyr)\n\n# 1. Define your target correlation matrix\ncor_mat <- matrix(c(1, 0.3, \n                   0.3, 1), nrow = 2, byrow = TRUE)\n\n# 2. Apply Cholesky decomposition\nchol_mat <- chol(cor_mat)\n\n# 3. Generate uncorrelated random numbers\nold_random <- matrix(rnorm(2000), ncol = 2)\n\n# 4. Transform to create correlation\nnew_random <- old_random %*% chol_mat\n\n# Verify the correlation\ncor(new_random)\n```\n\nThe resulting `new_random` matrix contains values exhibiting approximately the target correlation structure.\n\n## Implementation Considerations\n\n###  Independence\n\nThe input data must demonstrate statistical independence for the Cholesky method to function correctly. Pre-existing correlations in the input data compromise the method's ability to achieve target correlation structures:\n\n```{r}\n#| label: correlation-comparison\n\n# What happens with already correlated input?\nsimulate_correlation <- function(input_correlation, target = 0.3) {\n  results <- replicate(1000, {\n    # Create input with specified correlation\n    x <- rnorm(1000)\n    y <- input_correlation * x + rnorm(1000, sd = sqrt(1 - input_correlation^2))\n    \n    # Apply our method\n    old_random <- cbind(x, y)\n    chol_mat <- chol(matrix(c(1, target, target, 1), ncol = 2))\n    new_random <- old_random %*% chol_mat\n    \n    # Return resulting correlation\n    cor(new_random)[1,2]\n  })\n  return(results)\n}\n\n# Compare results with different input correlations\ncorrelated_results <- simulate_correlation(0.8, target = 0.3)\nuncorrelated_results <- simulate_correlation(0.001, target = 0.3)\n\n# Create data frame for ggplot2\nplot_data <- data.frame(\n  correlation = c(correlated_results, uncorrelated_results),\n  input_type = factor(rep(c(\"Correlated Input (0.8)\", \"Uncorrelated Input (0.001)\"), \n                         each = length(correlated_results)))\n)\n\n# Create density plot with ggplot2\nggplot(plot_data, aes(x = correlation, fill = input_type, color = input_type)) +\n  geom_density(alpha = 0.6) +\n  labs(title = \"Effect of Input Correlation on Target Correlation Achievement\",\n       subtitle = \"Target correlation = 0.3\",\n       x = \"Achieved Correlation\",\n       y = \"Density\",\n       fill = \"Input Data Type\",\n       color = \"Input Data Type\") +\n  theme_minimal() +\n  theme(legend.position = \"bottom\") +\n  scale_fill_manual(values = c(\"slateblue\", \"lightblue\")) +\n  scale_color_manual(values = c(\"darkblue\", \"darkblue\"))\n```\n\nWhen input data contains pre-existing correlation patterns, the Cholesky method cannot effectively override these relationships to establish the desired target correlation structure.\n\n### Distribution Consistency\n\nOptimal results require consistent probability distributions across all variables in the transformation:\n\n```{r}\n#| label: distribution-comparison\n\n# Different distributions cause problems\nset.seed(123)\nx1 <- rchisq(1000, df = 3)  # Chi-squared (skewed)\ny1 <- rnorm(1000)           # Normal (symmetric)\nold_mixed <- cbind(x1, y1)\n\n# Same distribution works better\nx2 <- rchisq(1000, df = 3)\ny2 <- rchisq(1000, df = 3)\nold_same <- cbind(x2, y2)\n\n# Apply the same transformation to both\nchol_mat <- chol(matrix(c(1, 0.7, 0.7, 1), ncol = 2))\nnew_mixed <- old_mixed %*% chol_mat\nnew_same <- old_same %*% chol_mat\n\n# Compare results\ncat(\"Target correlation: 0.7\\n\")\ncat(\"Mixed distributions result:\", round(cor(new_mixed)[1,2], 3), \"\\n\")\ncat(\"Same distribution result:\", round(cor(new_same)[1,2], 3))\n```\n\nThe combination of different probability distributions (such as normal and chi-squared) can result in unexpected correlation patterns following the Cholesky transformation.\n\n### Distribution Properties\n\nThe Cholesky transformation may fundamentally alter the statistical properties of the original data:\n\n```{r}\n#| label: property-changes\n\n# Original positive-only distribution\nx <- rchisq(1000, df = 3)  # Always positive\ny <- rchisq(1000, df = 3)  # Always positive\nold_random <- cbind(x, y)\n\n# Apply negative correlation\nchol_mat <- chol(matrix(c(1, -0.7, -0.7, 1), ncol = 2))\nnew_random <- old_random %*% chol_mat\n\n# Check what happened\ncat(\"Original data range:\", round(range(old_random), 2), \"\\n\")\ncat(\"Transformed data range:\", round(range(new_random), 2), \"\\n\")\ncat(\"Negative values in result:\", sum(new_random < 0), \"out of\", length(new_random))\n```\n\nThe Cholesky transformation can fundamentally modify data characteristics, such as introducing negative values into previously positive-only distributions, thereby altering the fundamental nature of the data.\n\n## Alternate Implementation: `mvtnorm`\n\nFor practical applications requiring efficient implementation, the `mvtnorm` package provides a streamlined solution for generating multivariate normal distributions with specified correlation structures:\n\n```{r}\n#| label: mvtnorm\n\n# Load the package\nlibrary(mvtnorm)\n\n# Define means and covariance matrix\nmeans <- c(10, 20)  # Mean for each variable\nsigma <- matrix(c(4, 2,   # Covariance matrix\n                  2, 3), ncol = 2)\n\n# See the implied correlation\ncov2cor(sigma)\n\n# Generate correlated normal data in one step\nx <- rmvnorm(n = 1000, mean = means, sigma = sigma)\n\n# Verify the result\nround(cor(x), 3)\n```\n\n## Key Takeaways\n\n- **Cholesky decomposition provides a mathematical foundation** for transforming uncorrelated data into correlated structures through matrix operations\n- **Input data independence is critical** for successful correlation induction; pre-existing correlations compromise the transformation effectiveness\n- **Distribution consistency across variables ensures optimal results** and prevents unexpected correlation artifacts\n- **The transformation process can alter fundamental data properties**, requiring careful consideration of distributional characteristics\n- **The mvtnorm package offers production-ready solutions** for multivariate normal data generation with specified correlation structures\n- **Method selection depends on specific requirements**: Cholesky for educational and custom applications, mvtnorm for operational efficiency","srcMarkdownNoYaml":"\n\n## Introduction\n\nThe generation of random data with specified correlation patterns can be useful in statistical simulation and this tutorial provides a  methodology for creating correlated random numbers in R. The techniques presented enable the development of realistic synthetic datasets with precisely controlled correlation structures, essential for robust statistical analysis and model validation.\n\n## The Cholesky Decomposition Method\n\n```{r}\n#| label: setup\n\n# Load required packages\nlibrary(ggplot2)\nlibrary(dplyr)\n\n# 1. Define your target correlation matrix\ncor_mat <- matrix(c(1, 0.3, \n                   0.3, 1), nrow = 2, byrow = TRUE)\n\n# 2. Apply Cholesky decomposition\nchol_mat <- chol(cor_mat)\n\n# 3. Generate uncorrelated random numbers\nold_random <- matrix(rnorm(2000), ncol = 2)\n\n# 4. Transform to create correlation\nnew_random <- old_random %*% chol_mat\n\n# Verify the correlation\ncor(new_random)\n```\n\nThe resulting `new_random` matrix contains values exhibiting approximately the target correlation structure.\n\n## Implementation Considerations\n\n###  Independence\n\nThe input data must demonstrate statistical independence for the Cholesky method to function correctly. Pre-existing correlations in the input data compromise the method's ability to achieve target correlation structures:\n\n```{r}\n#| label: correlation-comparison\n\n# What happens with already correlated input?\nsimulate_correlation <- function(input_correlation, target = 0.3) {\n  results <- replicate(1000, {\n    # Create input with specified correlation\n    x <- rnorm(1000)\n    y <- input_correlation * x + rnorm(1000, sd = sqrt(1 - input_correlation^2))\n    \n    # Apply our method\n    old_random <- cbind(x, y)\n    chol_mat <- chol(matrix(c(1, target, target, 1), ncol = 2))\n    new_random <- old_random %*% chol_mat\n    \n    # Return resulting correlation\n    cor(new_random)[1,2]\n  })\n  return(results)\n}\n\n# Compare results with different input correlations\ncorrelated_results <- simulate_correlation(0.8, target = 0.3)\nuncorrelated_results <- simulate_correlation(0.001, target = 0.3)\n\n# Create data frame for ggplot2\nplot_data <- data.frame(\n  correlation = c(correlated_results, uncorrelated_results),\n  input_type = factor(rep(c(\"Correlated Input (0.8)\", \"Uncorrelated Input (0.001)\"), \n                         each = length(correlated_results)))\n)\n\n# Create density plot with ggplot2\nggplot(plot_data, aes(x = correlation, fill = input_type, color = input_type)) +\n  geom_density(alpha = 0.6) +\n  labs(title = \"Effect of Input Correlation on Target Correlation Achievement\",\n       subtitle = \"Target correlation = 0.3\",\n       x = \"Achieved Correlation\",\n       y = \"Density\",\n       fill = \"Input Data Type\",\n       color = \"Input Data Type\") +\n  theme_minimal() +\n  theme(legend.position = \"bottom\") +\n  scale_fill_manual(values = c(\"slateblue\", \"lightblue\")) +\n  scale_color_manual(values = c(\"darkblue\", \"darkblue\"))\n```\n\nWhen input data contains pre-existing correlation patterns, the Cholesky method cannot effectively override these relationships to establish the desired target correlation structure.\n\n### Distribution Consistency\n\nOptimal results require consistent probability distributions across all variables in the transformation:\n\n```{r}\n#| label: distribution-comparison\n\n# Different distributions cause problems\nset.seed(123)\nx1 <- rchisq(1000, df = 3)  # Chi-squared (skewed)\ny1 <- rnorm(1000)           # Normal (symmetric)\nold_mixed <- cbind(x1, y1)\n\n# Same distribution works better\nx2 <- rchisq(1000, df = 3)\ny2 <- rchisq(1000, df = 3)\nold_same <- cbind(x2, y2)\n\n# Apply the same transformation to both\nchol_mat <- chol(matrix(c(1, 0.7, 0.7, 1), ncol = 2))\nnew_mixed <- old_mixed %*% chol_mat\nnew_same <- old_same %*% chol_mat\n\n# Compare results\ncat(\"Target correlation: 0.7\\n\")\ncat(\"Mixed distributions result:\", round(cor(new_mixed)[1,2], 3), \"\\n\")\ncat(\"Same distribution result:\", round(cor(new_same)[1,2], 3))\n```\n\nThe combination of different probability distributions (such as normal and chi-squared) can result in unexpected correlation patterns following the Cholesky transformation.\n\n### Distribution Properties\n\nThe Cholesky transformation may fundamentally alter the statistical properties of the original data:\n\n```{r}\n#| label: property-changes\n\n# Original positive-only distribution\nx <- rchisq(1000, df = 3)  # Always positive\ny <- rchisq(1000, df = 3)  # Always positive\nold_random <- cbind(x, y)\n\n# Apply negative correlation\nchol_mat <- chol(matrix(c(1, -0.7, -0.7, 1), ncol = 2))\nnew_random <- old_random %*% chol_mat\n\n# Check what happened\ncat(\"Original data range:\", round(range(old_random), 2), \"\\n\")\ncat(\"Transformed data range:\", round(range(new_random), 2), \"\\n\")\ncat(\"Negative values in result:\", sum(new_random < 0), \"out of\", length(new_random))\n```\n\nThe Cholesky transformation can fundamentally modify data characteristics, such as introducing negative values into previously positive-only distributions, thereby altering the fundamental nature of the data.\n\n## Alternate Implementation: `mvtnorm`\n\nFor practical applications requiring efficient implementation, the `mvtnorm` package provides a streamlined solution for generating multivariate normal distributions with specified correlation structures:\n\n```{r}\n#| label: mvtnorm\n\n# Load the package\nlibrary(mvtnorm)\n\n# Define means and covariance matrix\nmeans <- c(10, 20)  # Mean for each variable\nsigma <- matrix(c(4, 2,   # Covariance matrix\n                  2, 3), ncol = 2)\n\n# See the implied correlation\ncov2cor(sigma)\n\n# Generate correlated normal data in one step\nx <- rmvnorm(n = 1000, mean = means, sigma = sigma)\n\n# Verify the result\nround(cor(x), 3)\n```\n\n## Key Takeaways\n\n- **Cholesky decomposition provides a mathematical foundation** for transforming uncorrelated data into correlated structures through matrix operations\n- **Input data independence is critical** for successful correlation induction; pre-existing correlations compromise the transformation effectiveness\n- **Distribution consistency across variables ensures optimal results** and prevents unexpected correlation artifacts\n- **The transformation process can alter fundamental data properties**, requiring careful consideration of distributional characteristics\n- **The mvtnorm package offers production-ready solutions** for multivariate normal data generation with specified correlation structures\n- **Method selection depends on specific requirements**: Cholesky for educational and custom applications, mvtnorm for operational efficiency"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"message":false,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","highlight-style":"zenburn","toc":true,"css":["../styles.css"],"output-file":"generating-correlated-random-numbers.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.42","editor":"source","theme":"sketchy","code-copy":true,"title":"Generating Correlated Random Numbers in R Using Matrix Methods","date":"2024-03-19","categories":["R","Statistics","Simulation"],"image":"../images/correlated.png"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}