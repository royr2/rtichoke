{"title":"Implementing Particle Swarm Optimization from Scratch in R","markdown":{"yaml":{"title":"Implementing Particle Swarm Optimization from Scratch in R","date":"2024-07-22","categories":["R","Optimization","Visualization"],"image":"../images/pso_anim.gif","execute":{"echo":true,"warning":false,"message":false,"eval":true}},"headingText":"Introduction","containsRefs":false,"markdown":"\n\n\nNature-inspired optimization algorithms demonstrate remarkable efficiency in solving complex optimization problems. This post provides a  implementation of Particle Swarm Optimization (PSO) from fundamental principles in R. The methodology presented enables efficient exploration of complex solution spaces through coordinated swarm intelligence.\n\n## Package Dependencies\n\n```{r}\n# Load required packages\nlibrary(dplyr)     # For data manipulation\nlibrary(ggplot2)   # For visualization\nlibrary(gganimate) # For animations\nlibrary(metR)      # For geom_arrow\n```\n\n## Optimization Test Function: Ackley's Function\n\nThis tutorial employs Ackley's function as the optimization benchmarkâ€”a challenging multimodal function characterized by numerous local minima that frequently entrap conventional optimization algorithms:\n\n```{r}\nobj_func <- function(x, y){\n  # Modified Ackley function with global minimum at (1,1)\n  -20 * exp(-0.2 * sqrt(0.5 *((x-1)^2 + (y-1)^2))) - \n    exp(0.5*(cos(2*pi*x) + cos(2*pi*y))) + exp(1) + 20\n}\n\n# Create a visualization grid\nx <- seq(-5, 5, length.out = 50)\ny <- seq(-5, 5, length.out = 50)\ngrid <- expand.grid(x, y, stringsAsFactors = FALSE)\ngrid$z <- obj_func(grid[,1], grid[,2])\n\n# Create a contour plot\ncontour_plot <- ggplot(grid, aes(x = Var1, y = Var2)) +\n  geom_contour_filled(aes(z = z), color = \"black\", alpha = 0.5) +\n  scale_fill_brewer(palette = \"Spectral\") + \n  theme_minimal() + \n  labs(x = \"x\", y = \"y\", title = \"Ackley's Function\")\n\ncontour_plot\n```\n\n## Theoretical Foundation of Particle Swarm Optimization\n\nPSO emulates the collective foraging behavior of biological swarms through the integration of individual memory with social information sharing:\n\n1. **Initialization**: Random distribution of particles across the search space\n2. **Memory Mechanism**: Each particle maintains a record of its personal best position\n3. **Information Sharing**: The swarm collectively maintains knowledge of the global best position\n4. **Movement Dynamics**: Particles adjust their trajectories based on both personal experience and collective knowledge\n\nThe velocity update equation represents a balance of three fundamental forces:\n\n$$v_{new} = w \\cdot v_{current} + c_1 \\cdot r_1 \\cdot (p_{best} - p_{current}) + c_2 \\cdot r_2 \\cdot (g_{best} - p_{current})$$\n\nWhere:\n\n- `w`: Inertia (momentum preservation)\n- `c1`: Personal influence (individual memory)\n- `c2`: Social influence (collective cooperation)\n- `r1,r2`: Stochastic components\n\n## Sample Implementation\n\n### Swarm Initialization\n\nThe initial phase involves creating a randomized swarm of particles and distributing them across the defined search space:\n\n```{r}\n# Set parameters\nn_particles <- 20\nw <- 0.5     # Inertia weight\nc1 <- 0.05   # Personal learning rate\nc2 <- 0.1    # Social learning rate\n\n# Create random particle positions\nx_range <- seq(-5, 5, length.out = 20)\ny_range <- seq(-5, 5, length.out = 20)\nX <- data.frame(\n  x = sample(x_range, n_particles, replace = FALSE),\n  y = sample(y_range, n_particles, replace = FALSE)\n)\n\n# Visualize initial positions\ncontour_plot + \n  geom_point(data = X, aes(x, y), color = \"red\", size = 2.5) + \n  labs(title = \"Initial Particle Positions\")\n```\n\n### Global Best Position and Velocity Initialization\n\nNext, we need to track each particle's personal best position and the swarm's global best position, while initializing velocity vectors:\n\n```{r}\n# Initialize random velocities\ndX <- matrix(runif(n_particles * 2), ncol = 2) * w\n\n# Set initial personal best positions\npbest <- X\npbest_obj <- obj_func(X[,1], X[,2])\n\n# Find global best position\ngbest <- pbest[which.min(pbest_obj),]\ngbest_obj <- min(pbest_obj)\n\n# Visualize with arrows showing pull toward global best\nX_dir <- X %>% \n  mutate(g_x = gbest[1,1], \n         g_y = gbest[1,2], \n         angle = atan((g_y - y)/(g_x - x))*180/pi,\n         angle = ifelse(g_x < x, 180 + angle, angle))\n\ncontour_plot + \n  geom_point(data = X, aes(x, y), color = \"red\", size = 2.5) + \n  geom_segment(data = X_dir, \n               aes(x = x, y = y, \n                   xend = x + 0.5*cos(angle*pi/180), \n                   yend = y + 0.5*sin(angle*pi/180)), \n               arrow = arrow(length = unit(0.1, \"cm\")), \n               color = \"blue\") +   labs(title = \"Forces Acting on Particles\")\n```\n\n### Position Update Mechanism\n\nThe position update process implements the core PSO algorithm, calculating new velocities based on the fundamental equation and updating particle positions accordingly:\n\n```{r}\n# Calculate new velocities using PSO equation\ndX <- w * dX + \n      c1*runif(1)*(pbest - X) + \n      c2*runif(1)*(as.matrix(gbest) - X)\n\n# Update positions\nX <- X + dX\n\n# Evaluate function at new positions\nobj <- obj_func(X[,1], X[,2])\n\n# Update personal best positions if improved\nidx <- which(obj <= pbest_obj)\npbest[idx,] <- X[idx,]\npbest_obj[idx] <- obj[idx]\n\n# Update global best position\nidx <- which.min(pbest_obj)\ngbest <- pbest[idx,]\ngbest_obj <- min(pbest_obj)\n\n# Visualize updated positions\nX_dir <- X %>% \n  mutate(g_x = gbest[1,1], \n         g_y = gbest[1,2], \n         angle = atan((g_y - y)/(g_x - x))*180/pi,\n         angle = ifelse(g_x < x, 180 + angle, angle))\n\ncontour_plot + \n  geom_point(data = X, aes(x, y), color = \"red\", size = 2.5) + \n  geom_segment(data = X_dir, \n               aes(x = x, y = y, \n                   xend = x + 0.5*cos(angle*pi/180), \n                   yend = y + 0.5*sin(angle*pi/180)), \n               arrow = arrow(length = unit(0.1, \"cm\")), \n               color = \"blue\") + \n  labs(title = \"Particles After First Update\")\n```\n\n## Full Implementation\n\nThe following implementation encapsulates the complete PSO algorithm within a reusable function framework:\n\n```{r}\npso_optim <- function(obj_func,      # Function to minimize\n                      c1 = 0.05,      # Personal learning rate\n                      c2 = 0.05,      # Social learning rate\n                      w = 0.8,        # Inertia weight\n                      n_particles = 20,  # Swarm size\n                      init_fact = 0.1,   # Initial velocity factor\n                      n_iter = 50        # Maximum iterations\n){\n  # Define search domain\n  x <- seq(-5, 5, length.out = 100)\n  y <- seq(-5, 5, length.out = 100)\n  \n  # Initialize particles\n  X <- cbind(sample(x, n_particles, replace = FALSE),\n             sample(y, n_particles, replace = FALSE))\n  dX <- matrix(runif(n_particles * 2) * init_fact, ncol = 2)\n  \n  # Initialize best positions\n  pbest <- X\n  pbest_obj <- obj_func(x = X[,1], y = X[,2])\n  gbest <- pbest[which.min(pbest_obj),]\n  gbest_obj <- min(pbest_obj)\n  \n  # Store positions for visualization\n  loc_df <- data.frame(X, iter = 0)\n  iter <- 1\n  \n  # Main optimization loop\n  while(iter < n_iter){\n    # Update velocities\n    dX <- w * dX + \n          c1*runif(1)*(pbest - X) + \n          c2*runif(1)*t(gbest - t(X))\n    \n    # Update positions\n    X <- X + dX\n    \n    # Evaluate and update best positions\n    obj <- obj_func(x = X[,1], y = X[,2])\n    idx <- which(obj <= pbest_obj)\n    pbest[idx,] <- X[idx,]\n    pbest_obj[idx] <- obj[idx]\n    \n    # Update global best\n    idx <- which.min(pbest_obj)\n    gbest <- pbest[idx,]\n    gbest_obj <- min(pbest_obj)\n    \n    # Store for visualization\n    iter <- iter + 1\n    loc_df <- rbind(loc_df, data.frame(X, iter = iter))\n  }\n  \n  return(list(X = loc_df, \n              obj = gbest_obj, \n              obj_loc = paste0(gbest, collapse = \",\")))\n}\n```\n\nThe following code snippet applies the PSO algorithm to the Ackley function:\n\n```{r}\n# Run the PSO algorithm\nout <- pso_optim(obj_func,\n                 c1 = 0.01,    # Low personal influence\n                 c2 = 0.05,    # Moderate social influence\n                 w = 0.5,      # Medium inertia\n                 n_particles = 50,\n                 init_fact = 0.1,\n                 n_iter = 200)\n\n# Check the result (global minimum should be at (1,1))\nout$obj_loc\n```\n\n## Visualising Swarm Behavior\n\nThe optimization process can be effectively visualized through animation, demonstrating the collective convergence behavior of the particle swarm:\n\n```{r}\n#| eval: false \n# Create animation of the optimization process\nggplot(out$X) +\n  geom_contour(data = grid, aes(x = Var1, y = Var2, z = z), color = \"black\") +\n  geom_point(aes(X1, X2)) +\n  labs(x = \"X\", y = \"Y\") +\n  transition_time(iter) +\n  ease_aes(\"linear\")\n```\n\n![](../images/pso_anim.gif)\n\n## Parameter Optimization and Algorithm Tuning\n\nThe PSO algorithm's performance characteristics can be substantially modified through systematic adjustment of three parameters:\n\n1. **Inertia Weight (w)**\n   - High values (>0.8): Particles maintain substantial momentum, aiding extensive exploration\n   - Low values (<0.4): Particles exhibit reduced momentum, facilitating solution refinement\n\n2. **Personal Learning Rate (c1)**\n   - High values: Particles prioritize individual discoveries and historical performance\n   - Low values: Particles demonstrate reduced reliance on personal experience\n\n3. **Social Learning Rate (c2)**\n   - High values: Particles demonstrate strong attraction toward the global optimum\n   - Low values: Particles maintain greater independence in exploration\n\n## Implementation Considerations\n\n- **Boundary Constraint Implementation**: Enforce particle confinement within valid solution regions\n- **Adaptive Parameter Strategies**: Implement dynamic parameter adjustment during optimization execution\n- **Convergence-Based Termination**: Establish sophisticated stopping criteria based on solution convergence\n- **High-Dimensional Extension**: Adapt the algorithm for complex, multi-dimensional optimization problems\n\n> The R package [`pso`](https://cran.r-project.org/web/packages/pso/index.html) provides a comprehensive, production-ready implementation suitable for industrial applications.\n\n## Key Takeaways\n\n- **PSO successfully emulates biological swarm intelligence** through mathematical modeling of collective behavior patterns\n- **The velocity update equation balances three critical forces**: inertia, personal experience, and social influence\n- **Parameter tuning significantly affects algorithm performance**, with distinct configurations optimizing exploration versus exploitation\n- **The algorithm scales effectively to high-dimensional problems** while maintaining computational efficiency\n- **Production implementations require boundary constraints and adaptive parameters** for robust performance","srcMarkdownNoYaml":"\n\n## Introduction\n\nNature-inspired optimization algorithms demonstrate remarkable efficiency in solving complex optimization problems. This post provides a  implementation of Particle Swarm Optimization (PSO) from fundamental principles in R. The methodology presented enables efficient exploration of complex solution spaces through coordinated swarm intelligence.\n\n## Package Dependencies\n\n```{r}\n# Load required packages\nlibrary(dplyr)     # For data manipulation\nlibrary(ggplot2)   # For visualization\nlibrary(gganimate) # For animations\nlibrary(metR)      # For geom_arrow\n```\n\n## Optimization Test Function: Ackley's Function\n\nThis tutorial employs Ackley's function as the optimization benchmarkâ€”a challenging multimodal function characterized by numerous local minima that frequently entrap conventional optimization algorithms:\n\n```{r}\nobj_func <- function(x, y){\n  # Modified Ackley function with global minimum at (1,1)\n  -20 * exp(-0.2 * sqrt(0.5 *((x-1)^2 + (y-1)^2))) - \n    exp(0.5*(cos(2*pi*x) + cos(2*pi*y))) + exp(1) + 20\n}\n\n# Create a visualization grid\nx <- seq(-5, 5, length.out = 50)\ny <- seq(-5, 5, length.out = 50)\ngrid <- expand.grid(x, y, stringsAsFactors = FALSE)\ngrid$z <- obj_func(grid[,1], grid[,2])\n\n# Create a contour plot\ncontour_plot <- ggplot(grid, aes(x = Var1, y = Var2)) +\n  geom_contour_filled(aes(z = z), color = \"black\", alpha = 0.5) +\n  scale_fill_brewer(palette = \"Spectral\") + \n  theme_minimal() + \n  labs(x = \"x\", y = \"y\", title = \"Ackley's Function\")\n\ncontour_plot\n```\n\n## Theoretical Foundation of Particle Swarm Optimization\n\nPSO emulates the collective foraging behavior of biological swarms through the integration of individual memory with social information sharing:\n\n1. **Initialization**: Random distribution of particles across the search space\n2. **Memory Mechanism**: Each particle maintains a record of its personal best position\n3. **Information Sharing**: The swarm collectively maintains knowledge of the global best position\n4. **Movement Dynamics**: Particles adjust their trajectories based on both personal experience and collective knowledge\n\nThe velocity update equation represents a balance of three fundamental forces:\n\n$$v_{new} = w \\cdot v_{current} + c_1 \\cdot r_1 \\cdot (p_{best} - p_{current}) + c_2 \\cdot r_2 \\cdot (g_{best} - p_{current})$$\n\nWhere:\n\n- `w`: Inertia (momentum preservation)\n- `c1`: Personal influence (individual memory)\n- `c2`: Social influence (collective cooperation)\n- `r1,r2`: Stochastic components\n\n## Sample Implementation\n\n### Swarm Initialization\n\nThe initial phase involves creating a randomized swarm of particles and distributing them across the defined search space:\n\n```{r}\n# Set parameters\nn_particles <- 20\nw <- 0.5     # Inertia weight\nc1 <- 0.05   # Personal learning rate\nc2 <- 0.1    # Social learning rate\n\n# Create random particle positions\nx_range <- seq(-5, 5, length.out = 20)\ny_range <- seq(-5, 5, length.out = 20)\nX <- data.frame(\n  x = sample(x_range, n_particles, replace = FALSE),\n  y = sample(y_range, n_particles, replace = FALSE)\n)\n\n# Visualize initial positions\ncontour_plot + \n  geom_point(data = X, aes(x, y), color = \"red\", size = 2.5) + \n  labs(title = \"Initial Particle Positions\")\n```\n\n### Global Best Position and Velocity Initialization\n\nNext, we need to track each particle's personal best position and the swarm's global best position, while initializing velocity vectors:\n\n```{r}\n# Initialize random velocities\ndX <- matrix(runif(n_particles * 2), ncol = 2) * w\n\n# Set initial personal best positions\npbest <- X\npbest_obj <- obj_func(X[,1], X[,2])\n\n# Find global best position\ngbest <- pbest[which.min(pbest_obj),]\ngbest_obj <- min(pbest_obj)\n\n# Visualize with arrows showing pull toward global best\nX_dir <- X %>% \n  mutate(g_x = gbest[1,1], \n         g_y = gbest[1,2], \n         angle = atan((g_y - y)/(g_x - x))*180/pi,\n         angle = ifelse(g_x < x, 180 + angle, angle))\n\ncontour_plot + \n  geom_point(data = X, aes(x, y), color = \"red\", size = 2.5) + \n  geom_segment(data = X_dir, \n               aes(x = x, y = y, \n                   xend = x + 0.5*cos(angle*pi/180), \n                   yend = y + 0.5*sin(angle*pi/180)), \n               arrow = arrow(length = unit(0.1, \"cm\")), \n               color = \"blue\") +   labs(title = \"Forces Acting on Particles\")\n```\n\n### Position Update Mechanism\n\nThe position update process implements the core PSO algorithm, calculating new velocities based on the fundamental equation and updating particle positions accordingly:\n\n```{r}\n# Calculate new velocities using PSO equation\ndX <- w * dX + \n      c1*runif(1)*(pbest - X) + \n      c2*runif(1)*(as.matrix(gbest) - X)\n\n# Update positions\nX <- X + dX\n\n# Evaluate function at new positions\nobj <- obj_func(X[,1], X[,2])\n\n# Update personal best positions if improved\nidx <- which(obj <= pbest_obj)\npbest[idx,] <- X[idx,]\npbest_obj[idx] <- obj[idx]\n\n# Update global best position\nidx <- which.min(pbest_obj)\ngbest <- pbest[idx,]\ngbest_obj <- min(pbest_obj)\n\n# Visualize updated positions\nX_dir <- X %>% \n  mutate(g_x = gbest[1,1], \n         g_y = gbest[1,2], \n         angle = atan((g_y - y)/(g_x - x))*180/pi,\n         angle = ifelse(g_x < x, 180 + angle, angle))\n\ncontour_plot + \n  geom_point(data = X, aes(x, y), color = \"red\", size = 2.5) + \n  geom_segment(data = X_dir, \n               aes(x = x, y = y, \n                   xend = x + 0.5*cos(angle*pi/180), \n                   yend = y + 0.5*sin(angle*pi/180)), \n               arrow = arrow(length = unit(0.1, \"cm\")), \n               color = \"blue\") + \n  labs(title = \"Particles After First Update\")\n```\n\n## Full Implementation\n\nThe following implementation encapsulates the complete PSO algorithm within a reusable function framework:\n\n```{r}\npso_optim <- function(obj_func,      # Function to minimize\n                      c1 = 0.05,      # Personal learning rate\n                      c2 = 0.05,      # Social learning rate\n                      w = 0.8,        # Inertia weight\n                      n_particles = 20,  # Swarm size\n                      init_fact = 0.1,   # Initial velocity factor\n                      n_iter = 50        # Maximum iterations\n){\n  # Define search domain\n  x <- seq(-5, 5, length.out = 100)\n  y <- seq(-5, 5, length.out = 100)\n  \n  # Initialize particles\n  X <- cbind(sample(x, n_particles, replace = FALSE),\n             sample(y, n_particles, replace = FALSE))\n  dX <- matrix(runif(n_particles * 2) * init_fact, ncol = 2)\n  \n  # Initialize best positions\n  pbest <- X\n  pbest_obj <- obj_func(x = X[,1], y = X[,2])\n  gbest <- pbest[which.min(pbest_obj),]\n  gbest_obj <- min(pbest_obj)\n  \n  # Store positions for visualization\n  loc_df <- data.frame(X, iter = 0)\n  iter <- 1\n  \n  # Main optimization loop\n  while(iter < n_iter){\n    # Update velocities\n    dX <- w * dX + \n          c1*runif(1)*(pbest - X) + \n          c2*runif(1)*t(gbest - t(X))\n    \n    # Update positions\n    X <- X + dX\n    \n    # Evaluate and update best positions\n    obj <- obj_func(x = X[,1], y = X[,2])\n    idx <- which(obj <= pbest_obj)\n    pbest[idx,] <- X[idx,]\n    pbest_obj[idx] <- obj[idx]\n    \n    # Update global best\n    idx <- which.min(pbest_obj)\n    gbest <- pbest[idx,]\n    gbest_obj <- min(pbest_obj)\n    \n    # Store for visualization\n    iter <- iter + 1\n    loc_df <- rbind(loc_df, data.frame(X, iter = iter))\n  }\n  \n  return(list(X = loc_df, \n              obj = gbest_obj, \n              obj_loc = paste0(gbest, collapse = \",\")))\n}\n```\n\nThe following code snippet applies the PSO algorithm to the Ackley function:\n\n```{r}\n# Run the PSO algorithm\nout <- pso_optim(obj_func,\n                 c1 = 0.01,    # Low personal influence\n                 c2 = 0.05,    # Moderate social influence\n                 w = 0.5,      # Medium inertia\n                 n_particles = 50,\n                 init_fact = 0.1,\n                 n_iter = 200)\n\n# Check the result (global minimum should be at (1,1))\nout$obj_loc\n```\n\n## Visualising Swarm Behavior\n\nThe optimization process can be effectively visualized through animation, demonstrating the collective convergence behavior of the particle swarm:\n\n```{r}\n#| eval: false \n# Create animation of the optimization process\nggplot(out$X) +\n  geom_contour(data = grid, aes(x = Var1, y = Var2, z = z), color = \"black\") +\n  geom_point(aes(X1, X2)) +\n  labs(x = \"X\", y = \"Y\") +\n  transition_time(iter) +\n  ease_aes(\"linear\")\n```\n\n![](../images/pso_anim.gif)\n\n## Parameter Optimization and Algorithm Tuning\n\nThe PSO algorithm's performance characteristics can be substantially modified through systematic adjustment of three parameters:\n\n1. **Inertia Weight (w)**\n   - High values (>0.8): Particles maintain substantial momentum, aiding extensive exploration\n   - Low values (<0.4): Particles exhibit reduced momentum, facilitating solution refinement\n\n2. **Personal Learning Rate (c1)**\n   - High values: Particles prioritize individual discoveries and historical performance\n   - Low values: Particles demonstrate reduced reliance on personal experience\n\n3. **Social Learning Rate (c2)**\n   - High values: Particles demonstrate strong attraction toward the global optimum\n   - Low values: Particles maintain greater independence in exploration\n\n## Implementation Considerations\n\n- **Boundary Constraint Implementation**: Enforce particle confinement within valid solution regions\n- **Adaptive Parameter Strategies**: Implement dynamic parameter adjustment during optimization execution\n- **Convergence-Based Termination**: Establish sophisticated stopping criteria based on solution convergence\n- **High-Dimensional Extension**: Adapt the algorithm for complex, multi-dimensional optimization problems\n\n> The R package [`pso`](https://cran.r-project.org/web/packages/pso/index.html) provides a comprehensive, production-ready implementation suitable for industrial applications.\n\n## Key Takeaways\n\n- **PSO successfully emulates biological swarm intelligence** through mathematical modeling of collective behavior patterns\n- **The velocity update equation balances three critical forces**: inertia, personal experience, and social influence\n- **Parameter tuning significantly affects algorithm performance**, with distinct configurations optimizing exploration versus exploitation\n- **The algorithm scales effectively to high-dimensional problems** while maintaining computational efficiency\n- **Production implementations require boundary constraints and adaptive parameters** for robust performance"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"message":false,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","highlight-style":"zenburn","toc":true,"css":["../styles.css"],"output-file":"building-particle-swarm-optimizer.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.42","editor":"source","theme":"sketchy","code-copy":true,"title":"Implementing Particle Swarm Optimization from Scratch in R","date":"2024-07-22","categories":["R","Optimization","Visualization"],"image":"../images/pso_anim.gif"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}