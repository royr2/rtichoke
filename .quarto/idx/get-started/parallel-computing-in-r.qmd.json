{"title":"Parallel Computing in R","markdown":{"yaml":{"title":"Parallel Computing in R","description":"Learn how to speed up your R code using parallel computing","date":"2025-04-26","categories":["performance","r-programming"],"image":"https://raw.githubusercontent.com/rstudio/hex-stickers/master/PNG/RStudio.png","execute":{"echo":true,"warning":false,"message":false,"eval":true}},"headingText":"Packages","containsRefs":false,"markdown":"\n\n\n```{r}\n# Install packages if needed (uncomment to run)\n# install.packages(c(\"parallel\", \"foreach\", \"doParallel\", \"tictoc\"))\n\n# Load the essential packages\nlibrary(parallel)    # Base R parallel functions\nlibrary(foreach)     # For parallel loops\nlibrary(doParallel)  # Backend for foreach\nlibrary(tictoc)      # For timing comparisons\n```\n\n## Detecting Available CPU Cores\n\nThe first step involves checking how many CPU cores are available on the system:\n\n```{r}\n# Detect the number of CPU cores\ndetectCores()\n```\n\nGood practice dictates leaving one core free for the operating system, so typically `detectCores() - 1` is used for parallel operations.\n\n## The Basics\n\nThis section demonstrates creating a simple function that takes time to execute, then compares sequential versus parallel execution times:\n\n```{r}\n# A function that takes time to execute\nslow_function <- function(x) {\n  Sys.sleep(0.5)  # Simulate computation time (half a second)\n  return(x^2)     # Return the square of x\n}\n\n# Create a list of numbers to process\nnumbers <- 1:10\n```\n\n### Method 1: Using parLapply (Works on All Systems)\n\nThis method works on all operating systems including Windows:\n\n```{r}\n# Step 1: Create a cluster of workers\ncl <- makeCluster(detectCores() - 1)\n\n# Step 2: Export any functions our workers need\nclusterExport(cl, \"slow_function\")\n\n# Run the sequential version and time it\ntic(\"Sequential version\")\nresult_sequential <- lapply(numbers, slow_function)\ntoc()\n\n# Run the parallel version and time it\ntic(\"Parallel version\")\nresult_parallel <- parLapply(cl, numbers, slow_function)\ntoc()\n\n# Step 3: Always stop the cluster when finished!\nstopCluster(cl)\n\n# Verify both methods give the same results\nall.equal(result_sequential, result_parallel)\n```\n\n### Method 2: Using mclapply (Unix/Mac Only)\n\nFor Mac or Linux systems, this simpler approach can be utilized:\n\n```{r}\n#| eval: false\n# For Mac/Linux users only\ntic(\"Parallel mclapply (Mac/Linux only)\")\nresult_parallel <- mclapply(numbers, slow_function, mc.cores = detectCores() - 1)\ntoc()\n```\n\n## The foreach Package: A More Intuitive Approach\n\nMany R practitioners find the `foreach` package easier to understand and implement. The package functions like a loop but can execute in parallel:\n\n```{r}\n# Step 1: Create and register a parallel backend\ncl <- makeCluster(detectCores() - 1)\nregisterDoParallel(cl)\n\n# Run sequential foreach with %do%\ntic(\"Sequential foreach\")\nresult_sequential <- foreach(i = 1:10) %do% {\n  slow_function(i)\n}\ntoc()\n\n# Run parallel foreach with %dopar%\ntic(\"Parallel foreach\")\nresult_parallel <- foreach(i = 1:10) %dopar% {\n  slow_function(i)\n}\ntoc()\n\n# Always stop the cluster when finished\nstopCluster(cl)\n\n# Verify results\nall.equal(result_sequential, result_parallel)\n```\n\n### Combining Results with foreach\n\nOne notable feature of `foreach` is the ease with which results can be combined:\n\n```{r}\n# Create and register a parallel backend\ncl <- makeCluster(detectCores() - 1)\nregisterDoParallel(cl)\n\n# Sum all results automatically with .combine='+'\ntic(\"Parallel sum of squares\")\ntotal <- foreach(i = 1:100, .combine = '+') %dopar% {\n  i^2\n}\ntoc()\n\n# Stop the cluster\nstopCluster(cl)\n\n# Verify the result\nprint(paste(\"Result obtained:\", total))\nprint(paste(\"Correct answer:\", sum((1:100)^2)))\n```\n\n## Matrix Operations\n\nLet's try something more realistic. Matrix operations are perfect for parallelization:\n\n```{r}\n# A more computationally intensive function\nmatrix_function <- function(n) {\n  # Create a random n×n matrix\n  m <- matrix(rnorm(n*n), ncol = n)\n  # Calculate eigenvalues (computationally expensive)\n  eigen(m)\n  return(sum(diag(m)))\n}\n\n# Let's process 8 matrices of size 300×300\nmatrix_sizes <- rep(300, 8)\n```\n\n### Performance Comparison\n\nLet's compare how different methods perform:\n\n```{r}\n# Sequential execution\ntic(\"Sequential\")\nsequential_result <- lapply(matrix_sizes, matrix_function)\nsequential_time <- toc(quiet = TRUE)\nsequential_time <- sequential_time$toc - sequential_time$tic\n\n# Parallel with parLapply\ncl <- makeCluster(detectCores() - 1)\nclusterExport(cl, \"matrix_function\")\ntic(\"parLapply\")\nparlapply_result <- parLapply(cl, matrix_sizes, matrix_function)\nparlapply_time <- toc(quiet = TRUE)\nparlapply_time <- parlapply_time$toc - parlapply_time$tic\nstopCluster(cl)\n\n# Parallel with foreach\ncl <- makeCluster(detectCores() - 1)\nregisterDoParallel(cl)\ntic(\"foreach\")\nforeach_result <- foreach(s = matrix_sizes) %dopar% {\n  matrix_function(s)\n}\nforeach_time <- toc(quiet = TRUE)\nforeach_time <- foreach_time$toc - foreach_time$tic\nstopCluster(cl)\n\n# Create a results table\nresults <- data.frame(\n  Method = c(\"Sequential\", \"parLapply\", \"foreach\"),\n  Time = c(sequential_time, parlapply_time, foreach_time),\n  Speedup = c(1, sequential_time/parlapply_time, sequential_time/foreach_time)\n)\n\n# Display the results\nresults\n```\n\n### Visualizing Results\n\n```{r}\n# Load ggplot2 for visualization\nlibrary(ggplot2)\n\n# Plot execution times\nggplot(results, aes(x = reorder(Method, -Time), y = Time, fill = Method)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Execution Time Comparison\",\n       x = \"Method\", y = \"Time (seconds)\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n# Plot speedup\nggplot(results, aes(x = reorder(Method, Speedup), y = Speedup, fill = Method)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Speedup Comparison\",\n       x = \"Method\", y = \"Times faster than sequential\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n```\n\n## Practical Implementation\n\nParallel computing isn't always the optimal choice. Here are some considerations:\n\n**✅ Good for parallelization:**\n- Independent calculations (like applying the same function to different data chunks)\n- Computationally intensive tasks (simulations, bootstrap resampling)\n- Tasks that take more than a few seconds to run sequentially\n\n**❌ Not good for parallelization:**\n- Very quick operations (parallelization overhead may exceed the time saved)\n- Tasks with heavy dependencies between steps\n- I/O-bound operations (reading/writing files)\n\n## Best Practices\n\n1. Always stop clusters with `stopCluster(cl)` when processing is complete\n2. Leave one core free for the operating system\n3. Start small and test with a subset of data\n4. Monitor memory usage - each worker needs its own copy of the data","srcMarkdownNoYaml":"\n\n## Packages\n\n```{r}\n# Install packages if needed (uncomment to run)\n# install.packages(c(\"parallel\", \"foreach\", \"doParallel\", \"tictoc\"))\n\n# Load the essential packages\nlibrary(parallel)    # Base R parallel functions\nlibrary(foreach)     # For parallel loops\nlibrary(doParallel)  # Backend for foreach\nlibrary(tictoc)      # For timing comparisons\n```\n\n## Detecting Available CPU Cores\n\nThe first step involves checking how many CPU cores are available on the system:\n\n```{r}\n# Detect the number of CPU cores\ndetectCores()\n```\n\nGood practice dictates leaving one core free for the operating system, so typically `detectCores() - 1` is used for parallel operations.\n\n## The Basics\n\nThis section demonstrates creating a simple function that takes time to execute, then compares sequential versus parallel execution times:\n\n```{r}\n# A function that takes time to execute\nslow_function <- function(x) {\n  Sys.sleep(0.5)  # Simulate computation time (half a second)\n  return(x^2)     # Return the square of x\n}\n\n# Create a list of numbers to process\nnumbers <- 1:10\n```\n\n### Method 1: Using parLapply (Works on All Systems)\n\nThis method works on all operating systems including Windows:\n\n```{r}\n# Step 1: Create a cluster of workers\ncl <- makeCluster(detectCores() - 1)\n\n# Step 2: Export any functions our workers need\nclusterExport(cl, \"slow_function\")\n\n# Run the sequential version and time it\ntic(\"Sequential version\")\nresult_sequential <- lapply(numbers, slow_function)\ntoc()\n\n# Run the parallel version and time it\ntic(\"Parallel version\")\nresult_parallel <- parLapply(cl, numbers, slow_function)\ntoc()\n\n# Step 3: Always stop the cluster when finished!\nstopCluster(cl)\n\n# Verify both methods give the same results\nall.equal(result_sequential, result_parallel)\n```\n\n### Method 2: Using mclapply (Unix/Mac Only)\n\nFor Mac or Linux systems, this simpler approach can be utilized:\n\n```{r}\n#| eval: false\n# For Mac/Linux users only\ntic(\"Parallel mclapply (Mac/Linux only)\")\nresult_parallel <- mclapply(numbers, slow_function, mc.cores = detectCores() - 1)\ntoc()\n```\n\n## The foreach Package: A More Intuitive Approach\n\nMany R practitioners find the `foreach` package easier to understand and implement. The package functions like a loop but can execute in parallel:\n\n```{r}\n# Step 1: Create and register a parallel backend\ncl <- makeCluster(detectCores() - 1)\nregisterDoParallel(cl)\n\n# Run sequential foreach with %do%\ntic(\"Sequential foreach\")\nresult_sequential <- foreach(i = 1:10) %do% {\n  slow_function(i)\n}\ntoc()\n\n# Run parallel foreach with %dopar%\ntic(\"Parallel foreach\")\nresult_parallel <- foreach(i = 1:10) %dopar% {\n  slow_function(i)\n}\ntoc()\n\n# Always stop the cluster when finished\nstopCluster(cl)\n\n# Verify results\nall.equal(result_sequential, result_parallel)\n```\n\n### Combining Results with foreach\n\nOne notable feature of `foreach` is the ease with which results can be combined:\n\n```{r}\n# Create and register a parallel backend\ncl <- makeCluster(detectCores() - 1)\nregisterDoParallel(cl)\n\n# Sum all results automatically with .combine='+'\ntic(\"Parallel sum of squares\")\ntotal <- foreach(i = 1:100, .combine = '+') %dopar% {\n  i^2\n}\ntoc()\n\n# Stop the cluster\nstopCluster(cl)\n\n# Verify the result\nprint(paste(\"Result obtained:\", total))\nprint(paste(\"Correct answer:\", sum((1:100)^2)))\n```\n\n## Matrix Operations\n\nLet's try something more realistic. Matrix operations are perfect for parallelization:\n\n```{r}\n# A more computationally intensive function\nmatrix_function <- function(n) {\n  # Create a random n×n matrix\n  m <- matrix(rnorm(n*n), ncol = n)\n  # Calculate eigenvalues (computationally expensive)\n  eigen(m)\n  return(sum(diag(m)))\n}\n\n# Let's process 8 matrices of size 300×300\nmatrix_sizes <- rep(300, 8)\n```\n\n### Performance Comparison\n\nLet's compare how different methods perform:\n\n```{r}\n# Sequential execution\ntic(\"Sequential\")\nsequential_result <- lapply(matrix_sizes, matrix_function)\nsequential_time <- toc(quiet = TRUE)\nsequential_time <- sequential_time$toc - sequential_time$tic\n\n# Parallel with parLapply\ncl <- makeCluster(detectCores() - 1)\nclusterExport(cl, \"matrix_function\")\ntic(\"parLapply\")\nparlapply_result <- parLapply(cl, matrix_sizes, matrix_function)\nparlapply_time <- toc(quiet = TRUE)\nparlapply_time <- parlapply_time$toc - parlapply_time$tic\nstopCluster(cl)\n\n# Parallel with foreach\ncl <- makeCluster(detectCores() - 1)\nregisterDoParallel(cl)\ntic(\"foreach\")\nforeach_result <- foreach(s = matrix_sizes) %dopar% {\n  matrix_function(s)\n}\nforeach_time <- toc(quiet = TRUE)\nforeach_time <- foreach_time$toc - foreach_time$tic\nstopCluster(cl)\n\n# Create a results table\nresults <- data.frame(\n  Method = c(\"Sequential\", \"parLapply\", \"foreach\"),\n  Time = c(sequential_time, parlapply_time, foreach_time),\n  Speedup = c(1, sequential_time/parlapply_time, sequential_time/foreach_time)\n)\n\n# Display the results\nresults\n```\n\n### Visualizing Results\n\n```{r}\n# Load ggplot2 for visualization\nlibrary(ggplot2)\n\n# Plot execution times\nggplot(results, aes(x = reorder(Method, -Time), y = Time, fill = Method)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Execution Time Comparison\",\n       x = \"Method\", y = \"Time (seconds)\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n# Plot speedup\nggplot(results, aes(x = reorder(Method, Speedup), y = Speedup, fill = Method)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Speedup Comparison\",\n       x = \"Method\", y = \"Times faster than sequential\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n```\n\n## Practical Implementation\n\nParallel computing isn't always the optimal choice. Here are some considerations:\n\n**✅ Good for parallelization:**\n- Independent calculations (like applying the same function to different data chunks)\n- Computationally intensive tasks (simulations, bootstrap resampling)\n- Tasks that take more than a few seconds to run sequentially\n\n**❌ Not good for parallelization:**\n- Very quick operations (parallelization overhead may exceed the time saved)\n- Tasks with heavy dependencies between steps\n- I/O-bound operations (reading/writing files)\n\n## Best Practices\n\n1. Always stop clusters with `stopCluster(cl)` when processing is complete\n2. Leave one core free for the operating system\n3. Start small and test with a subset of data\n4. Monitor memory usage - each worker needs its own copy of the data"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"message":false,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","highlight-style":"zenburn","toc":true,"css":["../styles.css"],"output-file":"parallel-computing-in-r.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.42","editor":"source","theme":"sketchy","code-copy":true,"title":"Parallel Computing in R","description":"Learn how to speed up your R code using parallel computing","date":"2025-04-26","categories":["performance","r-programming"],"image":"https://raw.githubusercontent.com/rstudio/hex-stickers/master/PNG/RStudio.png"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}