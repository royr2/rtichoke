"0","#| fig-width: 12"
"0","#| fig-height: 10"
"0",""
"0","# Plot enhanced training history with overfitting detection"
"0","p1 <- training_history %>%"
"0","  select(epoch, train_total_loss, val_total_loss) %>%"
"0","  pivot_longer(cols = c(train_total_loss, val_total_loss), "
"0","               names_to = ""split"", values_to = ""loss"") %>%"
"0","  mutate(split = case_when("
"0","    split == ""train_total_loss"" ~ ""Training"","
"0","    split == ""val_total_loss"" ~ ""Validation"""
"0","  )) %>%"
"0","  ggplot(aes(x = epoch, y = loss, color = split)) +"
"0","  geom_line(size = 1) +"
"0","  geom_vline(xintercept = which.min(training_history$val_total_loss), "
"0","             linetype = ""dashed"", color = ""red"", alpha = 0.7) +"
"0","  labs(title = ""Training vs Validation Loss"","
"0","       subtitle = ""Red line shows optimal stopping point"","
"0","       x = ""Epoch"", y = ""Total Loss"", color = ""Dataset"") +"
"0","  theme_minimal() +"
"0","  scale_color_brewer(palette = ""Set1"")"
"0",""
"0","# Separate task losses"
"0","p2 <- training_history %>%"
"0","  select(epoch, train_reg_loss, val_reg_loss, train_cls_loss, val_cls_loss) %>%"
"0","  pivot_longer(cols = -epoch, names_to = ""metric"", values_to = ""loss"") %>%"
"0","  separate(metric, into = c(""split"", ""task"", ""loss_type""), sep = ""_"") %>%"
"0","  mutate("
"0","    split = ifelse(split == ""train"", ""Training"", ""Validation""),"
"0","    task = ifelse(task == ""reg"", ""Regression"", ""Classification""),"
"0","    metric_name = paste(split, task)"
"0","  ) %>%"
"0","  ggplot(aes(x = epoch, y = loss, color = metric_name)) +"
"0","  geom_line(size = 1) +"
"0","  facet_wrap(~task, scales = ""free_y"") +"
"0","  labs(title = ""Task-Specific Loss Curves"","
"0","       subtitle = ""Monitoring overfitting in individual tasks"","
"0","       x = ""Epoch"", y = ""Loss"", color = ""Split & Task"") +"
"0","  theme_minimal() +"
"0","  scale_color_brewer(palette = ""Set2"")"
"0",""
"0","# Validation accuracy progression"
"0","p3 <- ggplot(training_history, aes(x = epoch, y = val_accuracy)) +"
"0","  geom_line(color = ""#2c3e50"", size = 1) +"
"0","  geom_hline(yintercept = max(training_history$val_accuracy), "
"0","             linetype = ""dashed"", color = ""red"", alpha = 0.7) +"
"0","  labs(title = ""Validation Accuracy Progression"","
"0","       subtitle = paste(""Peak accuracy:"", round(max(training_history$val_accuracy), 3)),"
"0","       x = ""Epoch"", y = ""Validation Accuracy"") +"
"0","  theme_minimal()"
"0",""
"0","# Overfitting analysis"
"0","training_history$overfitting_gap <- training_history$train_total_loss - training_history$val_total_loss"
"0",""
"0","p4 <- ggplot(training_history, aes(x = epoch, y = overfitting_gap)) +"
"0","  geom_line(color = ""#e74c3c"", size = 1) +"
"0","  geom_hline(yintercept = 0, linetype = ""dashed"", alpha = 0.5) +"
"0","  labs(title = ""Overfitting Gap Analysis"","
"0","       subtitle = ""Difference between training and validation loss"","
"0","       x = ""Epoch"", y = ""Training Loss - Validation Loss"") +"
"0","  theme_minimal()"
"0",""
"0","# Regression predictions vs actual values"
"0","regression_results <- data.frame("
"0","  Actual = y_reg_test_r,"
"0","  Predicted = reg_preds_r"
"0",")"
"0",""
"0","p5 <- ggplot(regression_results, aes(x = Actual, y = Predicted)) +"
"0","  geom_point(alpha = 0.6, color = ""#2c3e50"") +"
"0","  geom_abline(slope = 1, intercept = 0, color = ""#e74c3c"", linetype = ""dashed"", size = 1) +"
"0","  geom_smooth(method = ""lm"", color = ""#3498db"", se = TRUE) +"
"0","  labs(title = ""Regression Task: Actual vs Predicted Values"","
"0","       subtitle = paste(""RÂ² ="", round(r_squared, 3), "", RMSE ="", round(rmse, 3)),"
"0","       x = ""Actual Values"", y = ""Predicted Values"") +"
"0","  theme_minimal()"
"0",""
"0","# Classification probability distribution"
"0","cls_results <- data.frame("
"0","  Probability = cls_probs_r,"
"0","  Actual_Class = factor(y_cls_test_r, labels = c(""Class 0"", ""Class 1""))"
"0",")"
"0",""
"0","p6 <- ggplot(cls_results, aes(x = Probability, fill = Actual_Class)) +"
"0","  geom_histogram(alpha = 0.7, bins = 20, position = ""identity"") +"
"0","  geom_vline(xintercept = 0.5, linetype = ""dashed"", color = ""red"") +"
"0","  labs(title = ""Classification Task: Predicted Probabilities"","
"0","       subtitle = paste(""Accuracy ="", round(accuracy * 100, 1), ""%""),"
"0","       x = ""Predicted Probability"", y = ""Count"", fill = ""Actual Class"") +"
"0","  theme_minimal() +"
"0","  scale_fill_brewer(palette = ""Set1"")"
"0",""
"0","# Combine plots"
"0","library(patchwork)"
"0","(p1 | p3) / (p2) / (p4) / (p5 | p6)"
