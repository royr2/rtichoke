"0","#| label: comparison-analysis"
"0","#| fig-width: 12"
"0","#| fig-height: 6"
"0",""
"0","# Define single-task networks"
"0","single_task_regression <- nn_module("
"0","  ""SingleTaskRegression"","
"0","  initialize = function(input_size, hidden_size) {"
"0","    self$layer1 <- nn_linear(input_size, hidden_size)"
"0","    self$layer2 <- nn_linear(hidden_size, hidden_size)"
"0","    self$output <- nn_linear(hidden_size, 1)"
"0","    self$dropout <- nn_dropout(0.2)"
"0","  },"
"0","  forward = function(x) {"
"0","    x %>%"
"0","      self$layer1() %>%"
"0","      nnf_relu() %>%"
"0","      self$dropout() %>%"
"0","      self$layer2() %>%"
"0","      nnf_relu() %>%"
"0","      self$dropout() %>%"
"0","      self$output()"
"0","  }"
"0",")"
"0",""
"0","single_task_classification <- nn_module("
"0","  ""SingleTaskClassification"", "
"0","  initialize = function(input_size, hidden_size) {"
"0","    self$layer1 <- nn_linear(input_size, hidden_size)"
"0","    self$layer2 <- nn_linear(hidden_size, hidden_size)"
"0","    self$output <- nn_linear(hidden_size, 1)"
"0","    self$dropout <- nn_dropout(0.2)"
"0","  },"
"0","  forward = function(x) {"
"0","    x %>%"
"0","      self$layer1() %>%"
"0","      nnf_relu() %>%"
"0","      self$dropout() %>%"
"0","      self$layer2() %>%"
"0","      nnf_relu() %>%"
"0","      self$dropout() %>%"
"0","      self$output()"
"0","  }"
"0",")"
"0",""
"0","# Train single-task models quickly for comparison"
"0","train_single_task <- function(model, loss_fn, target, epochs = 100) {"
"0","  optimizer <- optim_adam(model$parameters, lr = 0.01)"
"0","  "
"0","  for(epoch in 1:epochs) {"
"0","    model$train()"
"0","    optimizer$zero_grad()"
"0","    output <- model(x_train)"
"0","    loss <- loss_fn(output$squeeze(), target)"
"0","    loss$backward()"
"0","    optimizer$step()"
"0","  }"
"0","  "
"0","  # Evaluate"
"0","  model$eval()"
"0","  with_no_grad({"
"0","    test_output <- model(x_test)"
"0","    if(loss_fn == nnf_mse_loss) {"
"0","      test_loss <- loss_fn(test_output$squeeze(), y_reg_test)"
"0","      return(list(loss = test_loss$item(), type = ""regression""))"
"0","    } else {"
"0","      test_loss <- loss_fn(test_output$squeeze(), y_cls_test)"
"0","      probs <- nnf_sigmoid(test_output$squeeze())"
"0","      preds <- (probs > 0.5)$to(torch_int())"
"0","      accuracy <- (preds == y_cls_test$to(torch_int()))$sum()$item() / length(test_idx)"
"0","      return(list(loss = test_loss$item(), accuracy = accuracy, type = ""classification""))"
"0","    }"
"0","  })"
"0","}"
"0",""
"0","# Train single-task models"
"0","cat(""Training single-task models for comparison...\n"")"
"1","Training single-task models for comparison...
"
"0","reg_model <- single_task_regression(5, 64)"
"0","cls_model <- single_task_classification(5, 64)"
"0",""
"0","reg_results <- train_single_task(reg_model, nnf_mse_loss, y_reg_train)"
"2","Error in loss_fn == nnf_mse_loss : 
  comparison (==) is possible only for atomic and list types
"
