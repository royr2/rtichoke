---
title: "Introduction to dplyr"
description: "Learn the basics of data manipulation with the dplyr package in R"
date: "2025-03-30"
categories: [data-manipulation, tidyverse]
image: "https://raw.githubusercontent.com/rstudio/hex-stickers/master/PNG/dplyr.png"
execute:
  echo: true
  warning: false
  message: false
  eval: true
---

## Introduction to dplyr

The `dplyr` package is part of the tidyverse and provides a grammar for data manipulation in R. It makes data transformation tasks more intuitive and readable.

### Getting Started with dplyr

First, let's install and load the package:

```{r}
# Install if needed (uncomment to run)
# install.packages("dplyr")
# install.packages("tibble")

# Load the packages
library(dplyr)
library(tibble)  # For rownames_to_column function

# We'll use the built-in mtcars dataset
data(mtcars)
glimpse(mtcars)
```

### The Main dplyr Verbs

dplyr is built around a set of core verbs (functions) that perform common data manipulation tasks:

#### 1. `filter()` - Subset rows based on conditions

```{r}
# Select cars with 6 cylinders
filter(mtcars, cyl == 6)

# Multiple conditions: cars with 6 cylinders AND mpg > 20
filter(mtcars, cyl == 6, mpg > 20)

# OR conditions
filter(mtcars, cyl == 6 | mpg > 30)
```

#### 2. `select()` - Pick columns by name

```{r}
# Select specific columns
select(mtcars, mpg, cyl, hp)

# Select a range of columns
select(mtcars, mpg:hp)

# Select all columns except some
select(mtcars, -gear, -carb)

# Rename columns while selecting
select(mtcars, miles_per_gallon = mpg, cylinders = cyl)
```

#### 3. `mutate()` - Create new columns

```{r}
# Add a new column
mutate(mtcars, 
       kpl = mpg * 0.425,  # Convert mpg to km per liter
       hp_per_cyl = hp / cyl)

# Modify existing columns and add new ones
mutate(mtcars,
       mpg = mpg * 0.425,  # Overwrite mpg with km per liter
       efficiency = mpg / wt)
```

#### 4. `arrange()` - Reorder rows

```{r}
# Sort by mpg (ascending)
arrange(mtcars, mpg)

# Sort by mpg (descending)
arrange(mtcars, desc(mpg))

# Sort by multiple columns
arrange(mtcars, cyl, desc(mpg))
```

#### 5. `summarize()` - Collapse rows to summary statistics

```{r}
# Calculate summary statistics
summarize(mtcars,
          avg_mpg = mean(mpg),
          max_hp = max(hp),
          count = n())
```

#### 6. `group_by()` - Group data for operations

```{r}
# Group by cylinder and calculate statistics per group
mtcars %>%
  group_by(cyl) %>%
  summarize(
    count = n(),
    avg_mpg = mean(mpg),
    avg_hp = mean(hp),
    .groups = "drop"
  )
```

### The Pipe Operator (`%>%`)

The pipe operator makes code more readable by chaining operations:

```{r}
# Without pipes
result1 <- filter(mtcars, cyl == 4)
result2 <- select(result1, mpg, hp, wt)
result3 <- arrange(result2, desc(mpg))
result3

# With pipes - same operations, more readable
mtcars %>%
  filter(cyl == 4) %>%
  select(mpg, hp, wt) %>%
  arrange(desc(mpg))
```

### More Useful dplyr Functions

#### `distinct()` - Get unique rows

```{r}
# Get unique values of cyl and gear
mtcars %>%
  select(cyl, gear) %>%
  distinct()
```

#### `count()` - Count occurrences

```{r}
# Count cars by cylinder
mtcars %>%
  count(cyl, sort = TRUE)

# Count by multiple variables
mtcars %>%
  count(cyl, gear)
```

#### `slice()` - Select rows by position

```{r}
# Select first 5 rows
mtcars %>%
  slice(1:5)

# Select top 3 rows by mpg
mtcars %>%
  arrange(desc(mpg)) %>%
  slice(1:3)
```

#### `pull()` - Extract a column as a vector

```{r}
# Extract mpg column as a vector
mtcars %>%
  pull(mpg)
```

### Combining Multiple Operations

Let's solve a more complex problem by combining multiple dplyr functions:

```{r}
# First add rownames as a column
cars_with_names <- mtcars %>%
  tibble::rownames_to_column("model")

# Now perform the analysis
cars_with_names %>%
  group_by(cyl) %>%
  filter(mpg == max(mpg)) %>%
  select(cyl, model, mpg, hp) %>%
  arrange(cyl) %>%
  ungroup()
```

### Working with Joins

dplyr provides functions for joining datasets:

```{r}
# Create sample datasets
manufacturers <- data.frame(
  make = c("Honda", "Toyota", "Ford", "BMW", "Mercedes"),
  country = c("Japan", "Japan", "USA", "Germany", "Germany"),
  stringsAsFactors = FALSE
)

cars <- data.frame(
  model = c("Civic", "Corolla", "Focus", "3 Series", "Fiesta"),
  make = c("Honda", "Toyota", "Ford", "BMW", "Ford"),
  stringsAsFactors = FALSE
)

# Inner join - only matching rows
inner_join(cars, manufacturers, by = "make")

# Left join - all rows from cars
left_join(cars, manufacturers, by = "make")

# Full join - all rows from both
full_join(cars, manufacturers, by = "make")
```

dplyr makes data manipulation in R more intuitive and efficient. Its consistent syntax and the pipe operator allow you to write code that's both powerful and readable.
