---
title: "Data Wrangling with dplyr"
date: "2025-03-30"
categories: [R, Data Manipulation, dplyr]
image: "../images/dplyr.png"
execute:
  echo: true
  warning: false
  message: false
  eval: true
---

# Mastering Data Manipulation with dplyr

The `dplyr` package is part of the tidyverse and provides a grammar for data manipulation in R. This post will demonstrate some essential data wrangling techniques using built-in datasets.

## Setup

First, let's load the necessary packages:

```{r}
#| label: setup
#| message: false

library(dplyr)
library(ggplot2)
library(knitr)
```

## Working with the mtcars Dataset

We'll use the built-in `mtcars` dataset for our examples:

```{r}
#| label: load-data
#| message: false

# Look at the mtcars data
glimpse(mtcars)
```

## Basic dplyr Functions

### Filtering Rows

```{r}
#| label: filter-example

# Find all cars with 6 cylinders
six_cyl <- mtcars %>% 
  filter(cyl == 6)

# Show the first few rows
head(six_cyl) %>%
  kable()
```

### Selecting Columns

```{r}
#| label: select-example

# Select only specific columns
car_data <- mtcars %>% 
  select(mpg, cyl, hp, wt)

head(car_data) %>%
  kable()
```

### Arranging Rows

```{r}
#| label: arrange-example

# Find the cars with best fuel efficiency
most_efficient <- mtcars %>% 
  arrange(desc(mpg)) %>%
  select(mpg, cyl, hp, wt)

head(most_efficient) %>%
  kable()
```

### Creating New Variables

```{r}
#| label: mutate-example

# Calculate power-to-weight ratio
car_stats <- mtcars %>% 
  mutate(
    power_to_weight = hp / wt,
    efficiency_score = mpg * (1/wt)
  ) %>%
  select(mpg, hp, wt, power_to_weight, efficiency_score)

head(car_stats) %>%
  kable()
```

### Summarizing Data

```{r}
#| label: summarize-example

# Calculate average stats by cylinder count
cyl_stats <- mtcars %>% 
  group_by(cyl) %>%
  summarize(
    avg_mpg = mean(mpg),
    avg_hp = mean(hp),
    count = n()
  ) %>%
  arrange(cyl)

cyl_stats %>%
  kable()
```

## Visualizing the Results

```{r}
#| label: visualization
#| fig-width: 10
#| fig-height: 6

# Plot average mpg by cylinder count
ggplot(cyl_stats, aes(x = factor(cyl), y = avg_mpg)) +
  geom_col(aes(fill = avg_hp)) +
  geom_text(aes(label = round(avg_mpg, 1)), vjust = -0.5) +
  scale_fill_viridis_c() +
  labs(
    title = "Average Fuel Efficiency by Cylinder Count",
    subtitle = "Color indicates average horsepower",
    x = "Number of Cylinders",
    y = "Average MPG",
    fill = "Avg. Horsepower"
  ) +
  theme_minimal()
```

## Working with the iris Dataset

Let's also explore another built-in dataset, `iris`:

```{r}
#| label: iris-data

# Look at the iris data
glimpse(iris)
```

### Filtering and Grouping

```{r}
#| label: iris-analysis

# Calculate average measurements by species
iris_stats <- iris %>%
  group_by(Species) %>%
  summarize(
    avg_sepal_length = mean(Sepal.Length),
    avg_sepal_width = mean(Sepal.Width),
    avg_petal_length = mean(Petal.Length),
    avg_petal_width = mean(Petal.Width),
    count = n()
  )

iris_stats %>%
  kable()
```

### Visualizing Iris Data

```{r}
#| label: iris-visualization
#| fig-width: 10
#| fig-height: 6

# Create a scatter plot with multiple dimensions
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
  geom_point(size = 3, alpha = 0.7) +
  geom_smooth(method = "lm", se = FALSE) +
  labs(
    title = "Iris Dataset: Sepal Dimensions by Species",
    x = "Sepal Length (cm)",
    y = "Sepal Width (cm)"
  ) +
  theme_minimal() +
  facet_wrap(~Species)
```

## Conclusion

The `dplyr` package provides a consistent and intuitive way to manipulate data in R. By mastering these basic functions, you'll be well on your way to efficient data analysis workflows.

In the next post, we'll explore how to combine these techniques with other packages in the tidyverse for even more powerful data analysis.
