---
title: "Getting Started with Python using R and Reticulate"
date: "2023-01-15"
categories: [R, Python, reticulate]
image: "../images/reticulate.png"
execute:
  echo: true
  warning: false
  message: false
  eval: false
---

Want to use Python's powerful libraries without leaving R? The reticulate package gives you the best of both worlds - R's elegant data handling and visualization with Python's machine learning and scientific computing tools. This post dives into how to set up a python environment using RStudio and the `reticulate` package and use this powerful bridge between languages. Here's a quick 4-step process to get started. 

## Install reticulate

```{r}
#| label: install-reticulate

install.packages("reticulate")
library(reticulate)
```

## Install Python via Miniconda

The easiest approach is to let reticulate handle Python installation for you:

```{r}
#| label: install-miniconda

install_miniconda(path = "c:/miniconda")
```

## Connect to Python

Reticulate creates a default environment called `r-reticulate`. Let's connect to it:

```{r}
#| label: use-conda-env

# Check available environments
conda_list()

# Connect to the default environment
use_condaenv("r-reticulate")
```

## Install Python Packages

Now you can install any Python packages you need:

```{r}
#| label: install-python-packages

py_install(c("pandas", "scikit-learn", "matplotlib"))
```

## Different Ways to Use Python in R

### 1. Import Python Modules Directly

```{r}
#| label: python-in-r

# Import pandas and use it like any R package
pd <- import("pandas")

# Create a pandas Series
pd$Series(c(1, 2, 3, 4, 5))

# Import numpy for numerical operations
np <- import("numpy")
np$mean(c(1:100))  # Calculate mean using numpy
```

### 2. Write Python Code in R Markdown

You can mix R and Python code in the same document by using Python code chunks:

```{python}
#| label: python-chunk

# This is Python code!
import pandas as pd
import numpy as np

# Create a simple DataFrame
df = pd.DataFrame({
    'A': np.random.randn(5),
    'B': np.random.randn(5)
})

print(df.describe())
```

### 3. Use Python Libraries in R Workflows

The most powerful approach is using Python's machine learning libraries within R:

```{r}
#| label: sklearn-example

# Import scikit-learn
sk <- import("sklearn.linear_model")

# Create and fit a linear regression model
model <- sk$LinearRegression()
model$fit(X = as.matrix(mtcars[, c("disp", "hp", "wt")]), 
         y = mtcars$mpg)

# Get predictions and coefficients
predictions <- model$predict(as.matrix(mtcars[, c("disp", "hp", "wt")]))
coefficients <- data.frame(
  Feature = c("Intercept", "disp", "hp", "wt"),
  Coefficient = c(model$intercept_, model$coef_)
)

coefficients
```

## Real-World Applications

Here are some ways to combine R and Python in your data science workflow:

### Data Science Pipeline

```{r}
# 1. Data cleaning with R's tidyverse
library(readr)
clean_data <- read_csv("data.csv") %>%
  filter(!is.na(important_column)) %>%
  mutate(new_feature = feature1 / feature2)

# 2. Machine learning with Python's scikit-learn
sk <- import("sklearn.ensemble")
model <- sk$RandomForestClassifier(n_estimators=100)
model$fit(X = as.matrix(clean_data[, features]), 
         y = clean_data$target)

# 3. Visualization with R's ggplot2
predictions <- model$predict_proba(as.matrix(clean_data[, features]))[,2]
clean_data %>%
  mutate(prediction = predictions) %>%
  ggplot(aes(x=feature1, y=feature2, color=prediction)) +
  geom_point() +
  scale_color_viridis_c()
```

### The Choice Between `R` and `Python`

**Use R for:**

- Data manipulation with dplyr/data.table
- Statistical modeling and hypothesis testing
- Publication-quality visualization
- Interactive reports and dashboards

**Use Python for:**

- Deep learning with TensorFlow/PyTorch
- Natural language processing
- Computer vision
- Advanced machine learning algorithms

However, with reticulate, you don't have to choose! Use the best tool for each part of your analysis!
